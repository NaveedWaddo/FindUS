{"version":3,"file":"NewReport-23f18946.js","sources":["../../../../node_modules/@tabler/icons-react/dist/esm/icons/IconEyeClosed.js","../../../../node_modules/@tabler/icons-react/dist/esm/icons/IconEye.js","../../../../node_modules/@tabler/icons-react/dist/esm/icons/IconInfoSquare.js","../../../../node_modules/@tabler/icons-react/dist/esm/icons/IconPinnedFilled.js","../../../../node_modules/@tabler/icons-react/dist/esm/icons/IconPinned.js","../../../forms/src/createWitness.tsx","../../../forms/src/addNewCase.tsx","../../../forms/src/addNewReports.tsx","../../src/components/templates/AddReports/AddReports.tsx","../../../forms/src/updateCase.tsx","../../src/components/templates/Home/Home.tsx","../../src/components/templates/AddNewCase/AddNewCase.tsx","../../src/components/templates/NewReport/NewReport.tsx"],"sourcesContent":["/**\n * @tabler/icons-react v2.30.0 - MIT\n */\n\nimport createReactComponent from '../createReactComponent.js';\n\nvar IconEyeClosed = createReactComponent(\"eye-closed\", \"IconEyeClosed\", [\n  [\n    \"path\",\n    {\n      d: \"M21 9c-2.4 2.667 -5.4 4 -9 4c-3.6 0 -6.6 -1.333 -9 -4\",\n      key: \"svg-0\"\n    }\n  ],\n  [\"path\", { d: \"M3 15l2.5 -3.8\", key: \"svg-1\" }],\n  [\"path\", { d: \"M21 14.976l-2.492 -3.776\", key: \"svg-2\" }],\n  [\"path\", { d: \"M9 17l.5 -4\", key: \"svg-3\" }],\n  [\"path\", { d: \"M15 17l-.5 -4\", key: \"svg-4\" }]\n]);\n\nexport { IconEyeClosed as default };\n//# sourceMappingURL=IconEyeClosed.js.map\n","/**\n * @tabler/icons-react v2.30.0 - MIT\n */\n\nimport createReactComponent from '../createReactComponent.js';\n\nvar IconEye = createReactComponent(\"eye\", \"IconEye\", [\n  [\"path\", { d: \"M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\", key: \"svg-0\" }],\n  [\n    \"path\",\n    {\n      d: \"M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6\",\n      key: \"svg-1\"\n    }\n  ]\n]);\n\nexport { IconEye as default };\n//# sourceMappingURL=IconEye.js.map\n","/**\n * @tabler/icons-react v2.30.0 - MIT\n */\n\nimport createReactComponent from '../createReactComponent.js';\n\nvar IconInfoSquare = createReactComponent(\"info-square\", \"IconInfoSquare\", [\n  [\"path\", { d: \"M12 9h.01\", key: \"svg-0\" }],\n  [\n    \"path\",\n    {\n      d: \"M3 5a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-14z\",\n      key: \"svg-1\"\n    }\n  ],\n  [\"path\", { d: \"M11 12h1v4h1\", key: \"svg-2\" }]\n]);\n\nexport { IconInfoSquare as default };\n//# sourceMappingURL=IconInfoSquare.js.map\n","/**\n * @tabler/icons-react v2.30.0 - MIT\n */\n\nimport createReactComponent from '../createReactComponent.js';\n\nvar IconPinnedFilled = createReactComponent(\"pinned-filled\", \"IconPinnedFilled\", [\n  [\n    \"path\",\n    {\n      d: \"M16 3a1 1 0 0 1 .117 1.993l-.117 .007v4.764l1.894 3.789a1 1 0 0 1 .1 .331l.006 .116v2a1 1 0 0 1 -.883 .993l-.117 .007h-4v4a1 1 0 0 1 -1.993 .117l-.007 -.117v-4h-4a1 1 0 0 1 -.993 -.883l-.007 -.117v-2a1 1 0 0 1 .06 -.34l.046 -.107l1.894 -3.791v-4.762a1 1 0 0 1 -.117 -1.993l.117 -.007h8z\",\n      fill: \"currentColor\",\n      key: \"svg-0\",\n      strokeWidth: \"0\"\n    }\n  ]\n]);\n\nexport { IconPinnedFilled as default };\n//# sourceMappingURL=IconPinnedFilled.js.map\n","/**\n * @tabler/icons-react v2.30.0 - MIT\n */\n\nimport createReactComponent from '../createReactComponent.js';\n\nvar IconPinned = createReactComponent(\"pinned\", \"IconPinned\", [\n  [\"path\", { d: \"M9 4v6l-2 4v2h10v-2l-2 -4v-6\", key: \"svg-0\" }],\n  [\"path\", { d: \"M12 16l0 5\", key: \"svg-1\" }],\n  [\"path\", { d: \"M8 4l8 0\", key: \"svg-2\" }]\n]);\n\nexport { IconPinned as default };\n//# sourceMappingURL=IconPinned.js.map\n","import { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\n\nexport const CreateWitnessFormSchema = z.object({\n  name: z.string(),\n})\n\nexport type FormTypeCreateWitness = z.infer<typeof CreateWitnessFormSchema>\n\nexport const useFormCreateWitness = () =>\n  useForm<FormTypeCreateWitness>({\n    resolver: zodResolver(CreateWitnessFormSchema),\n  })\n","import { zodResolver } from '@hookform/resolvers/zod'\nimport { ReactNode } from 'react'\nimport { FormProvider, useForm } from 'react-hook-form'\nimport { z } from 'zod'\nimport { Gender, ReportType, Status } from '@findus-org/network/src/generated'\n\nexport const newReportFormSchema = z.object({\n  localId: z.string(),\n  time: z.string(),\n  description: z.string().min(1, 'Description is required.'),\n  lat: z.number(),\n  lng: z.number(),\n  address: z.string().optional(),\n  type: z.nativeEnum(ReportType),\n  audio: z.string().nullable(),\n  images: z.any().optional(),\n  showPublic: z.boolean().optional(),\n  officerDescription: z.string().optional(),\n})\n\nexport const contactSchema = z.object({\n  number: z.string(),\n})\n\nexport const addNewCaseFormSchema = z.object({\n  status: z.nativeEnum(Status),\n  displayName: z.string(),\n  images: z.any().optional(),\n  description: z.string(),\n  dob: z.string(),\n  gender: z.nativeEnum(Gender),\n  height: z.number(),\n  weight: z.number(),\n  reports: z.array(newReportFormSchema).min(1),\n  contact: z.array(contactSchema).min(1),\n})\n\nexport type FormTypeAddNewCase = z.infer<typeof addNewCaseFormSchema>\n\nexport const useFormAddNewCase = () =>\n  useForm<FormTypeAddNewCase>({\n    resolver: zodResolver(addNewCaseFormSchema),\n  })\n\nexport const FormProviderAddNewCase = ({\n  children,\n}: {\n  children: ReactNode\n}) => {\n  const methods = useFormAddNewCase()\n\n  return <FormProvider {...methods}>{children}</FormProvider>\n}\n","import { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\nimport { newReportFormSchema } from './addNewCase'\n\nexport const addNewReportsFormSchema = z.object({\n  reports: z.array(newReportFormSchema).min(1, 'Add atleast one report.'),\n  caseId: z.number(),\n})\n\nexport type FormTypeAddNewReports = z.infer<typeof addNewReportsFormSchema>\n\nexport const useFormAddNewReports = () =>\n  useForm<FormTypeAddNewReports>({\n    resolver: zodResolver(addNewReportsFormSchema),\n    defaultValues: {\n      reports: [],\n    },\n  })\n\nexport const approveReportsFormSchema = z.object({\n  description: z.string(),\n})\n\nexport type FormTypeApproveReports = z.infer<typeof approveReportsFormSchema>\n\nexport const useFormApproveReports = () =>\n  useForm<FormTypeAddNewReports>({\n    resolver: zodResolver(approveReportsFormSchema),\n  })\n","import { IconPlus } from '@tabler/icons-react'\nimport { useRouter } from 'next/router'\nimport { useFieldArray, useFormContext, useWatch } from 'react-hook-form'\nimport { useMap } from 'react-map-gl'\n\nimport {\n  ReportType,\n  namedOperations,\n  useCreateReportsMutation,\n} from '@findus-org/network/src/generated'\n\nimport { Button } from '../../atoms/Button'\nimport { Form } from '../../atoms/Form'\nimport { HtmlInput } from '../../atoms/HtmlInput'\nimport { HtmlLabel } from '../../atoms/HtmlLabel'\nimport HtmlSelect from '../../atoms/HtmlSelect'\nimport { HtmlTextArea } from '../../atoms/HtmlTextArea'\nimport { AudioRecord } from '../../molecules/AudioRecord'\nimport { DisplayLocation } from '../AddNewCase/AddNewCase'\nimport { useAppSelector } from '@findus-org/store'\nimport { selectUid } from '@findus-org/store/user'\nimport { notification$ } from '@findus-org/util/subjects'\nimport { makeId } from '@findus-org/util'\nimport { FormTypeAddNewReports } from '@findus-org/forms/src/addNewReports'\n\nexport const AddReports = () => {\n  const {\n    register,\n    formState: { errors },\n    control,\n    setValue,\n    handleSubmit,\n    reset,\n    resetField,\n  } = useFormContext<FormTypeAddNewReports>()\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'reports',\n  })\n\n  const formReports = useWatch({\n    control,\n    name: 'reports',\n    defaultValue: [],\n  })\n\n  const { current: mapNewReport } = useMap()\n\n  const [createReportsMutation, { loading }] = useCreateReportsMutation()\n  const uid = useAppSelector(selectUid)\n  return (\n    <Form\n      className=\"p-2 space-y-6\"\n      onSubmit={handleSubmit(async (data) => {\n        const { data: savedData } = await createReportsMutation({\n          variables: {\n            caseId: +data.caseId,\n            createReportsInput: data.reports.map(\n              ({\n                audio,\n                description,\n                lat,\n                lng,\n                time,\n                type,\n                address,\n                images,\n              }) => ({\n                witnessId: uid,\n                location: {\n                  latitude: lat,\n                  longitude: lng,\n                  address: address || '',\n                },\n                audio,\n                description,\n                time,\n                type,\n                images: images || [],\n              }),\n            ),\n          },\n          awaitRefetchQueries: true,\n          refetchQueries: [namedOperations.Query.case],\n        })\n        if (savedData) {\n          notification$.next({\n            message: 'Reports submitted successfully. It is pending approval.',\n            type: 'success',\n          })\n\n          resetField('reports')\n        }\n      })}\n    >\n      {fields.map((field, index) => (\n        <div key={field.id} className=\"p-3 bg-gray-50\">\n          <div className=\"flex items-center justify-between\">\n            <div>Report #{index + 1}</div>\n            <Button\n              variant=\"text\"\n              size=\"none\"\n              color=\"error\"\n              onClick={() => remove(index)}\n            >\n              Remove\n            </Button>\n          </div>\n          <HtmlLabel title=\"Time\">\n            <HtmlInput\n              step=\"any\"\n              type=\"datetime-local\"\n              {...register(`reports.${index}.time`)}\n            />\n          </HtmlLabel>\n          <HtmlLabel title=\"Address\" optional>\n            <HtmlInput {...register(`reports.${index}.address`)} />\n          </HtmlLabel>\n          <HtmlLabel title=\"Voice\" optional>\n            <AudioRecord\n              setAudio={(url) => setValue(`reports.${index}.audio`, url)}\n            />\n          </HtmlLabel>\n          <HtmlLabel title=\"Type\">\n            <HtmlSelect {...register(`reports.${index}.type`)}>\n              <option defaultChecked value={ReportType.Sighting}>\n                Sighting\n              </option>\n              <option defaultChecked value={ReportType.Lead}>\n                Lead\n              </option>\n              <option defaultChecked value={ReportType.GeneralInformation}>\n                General Information\n              </option>\n            </HtmlSelect>\n          </HtmlLabel>\n          <HtmlLabel\n            title=\"Description\"\n            error={\n              errors.reports && errors?.reports[index]?.description?.message\n            }\n          >\n            <HtmlTextArea {...register(`reports.${index}.description`)} />\n          </HtmlLabel>\n          <DisplayLocation\n            lat={formReports[index]?.lat}\n            lng={formReports[index]?.lng}\n          />\n          <div className=\"flex justify-between mt-1\">\n            <Button\n              variant=\"text\"\n              size=\"none\"\n              onClick={() =>\n                mapNewReport?.flyTo({\n                  center: [formReports[index].lng, formReports[index].lat],\n                })\n              }\n            >\n              Go to location\n            </Button>\n          </div>\n        </div>\n      ))}\n      <Button\n        variant=\"outlined\"\n        fullWidth\n        onClick={() => {\n          const time = new Date().toISOString().split('.')[0]\n          append({\n            localId: makeId(),\n            lat: mapNewReport?.getCenter().lat || 0,\n            lng: mapNewReport?.getCenter().lng || 0,\n            description: '',\n            type: ReportType.Sighting,\n            time: time,\n            audio: null,\n          })\n        }}\n      >\n        Add report <IconPlus className=\"inline\" />\n      </Button>\n      {formReports.length ? (\n        <Button isLoading={loading} fullWidth type=\"submit\">\n          Submit\n        </Button>\n      ) : null}\n    </Form>\n  )\n}\n","import { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\nimport { Status } from '@findus-org/network/src/generated'\n\nexport const updateCaseFormSchema = z.object({\n  status: z.nativeEnum(Status),\n})\n\nexport type FormTypeUpdateCase = z.infer<typeof updateCaseFormSchema>\n\nexport const useFormUpdateCase = () =>\n  useForm<FormTypeUpdateCase>({\n    resolver: zodResolver(updateCaseFormSchema),\n  })\n","import { LngLatBounds } from 'mapbox-gl'\nimport { ReactNode, useEffect, useState, useMemo } from 'react'\nimport { Popup, Marker, useMap, ViewStateChangeEvent } from 'react-map-gl'\nimport { format } from 'date-fns'\n\nimport {\n  CaseQuery,\n  ReportType,\n  SearchCasesQuery,\n  useCreateApprovedReportMutation,\n  useUnapprovedReportsQuery,\n  useSearchCasesQuery,\n  useCaseQuery,\n  useUpdateCaseStatusMutation,\n  namedOperations,\n  Status,\n} from '@findus-org/network/src/generated'\n\nimport { Map } from '../../organisms/Map'\nimport { AnimatePresence } from 'framer-motion'\nimport {\n  IconBulb,\n  IconInfoSquare,\n  IconPinned,\n  IconX,\n} from '@tabler/icons-react'\n\nimport Image from 'next/image'\nimport { Button } from '../../atoms/Button'\nimport { Panel } from '../../organisms/Map/Panel'\nimport Accordion from '../../molecules/Accordion'\nimport { LinkButton } from '../../atoms/LinkButton'\nimport { useFormAddNewReports } from '@findus-org/forms/src/addNewReports'\nimport { FormProvider, useWatch } from 'react-hook-form'\nimport { HtmlLabel } from '../../atoms/HtmlLabel'\nimport { HtmlTextArea } from '../../atoms/HtmlTextArea'\nimport {\n  DisplayLocation,\n  MarkerPopup,\n  MarkerWithOfficerApproval,\n  useSetHeaderPic,\n  useSetHeaderText,\n} from '../AddNewCase/AddNewCase'\nimport { useGetCoordinates } from '../NewReport/NewReport'\nimport { useRouter } from 'next/router'\n\nimport { MapLines } from '../../molecules/MapLines'\n\nimport { KeyValue } from '../../atoms/KeyValue'\nimport { AddReports } from '../AddReports'\nimport { ReportsTimeline } from '../ReportsTimeline'\nimport { MissingPersonInfo } from '../../organisms/MissingPersonInfo'\nimport { ContactInfo } from '../../organisms/ContactInfo'\nimport { useKeypress } from '@findus-org/util'\nimport { useAppSelector } from '@findus-org/store'\nimport { selectApp, selectUser } from '@findus-org/store/user'\nimport { DefaultZoomControls } from '../../organisms/Map/ZoomControls/ZoomControls'\nimport { CurrentLocationButton } from '../../molecules/CurrentLocationButton'\nimport { SearchPlaceBox } from '../../molecules/SearchPlaceBox'\nimport { Loader } from '../../molecules/Loader'\nimport { useSetMapBoundsBasedOnReports } from '@findus-org/hooks/src/location'\nimport { PlainButton } from '../../atoms/PlainButton'\nimport { Dialog } from '../../atoms/Dialog'\nimport { useFormUpdateCase } from '@findus-org/forms/src/updateCase'\nimport { Form } from '../../atoms/Form'\nimport HtmlSelect from '../../atoms/HtmlSelect'\nimport { Switch } from '../../atoms/Switch'\nimport { notification$ } from '@findus-org/util/subjects'\n\nexport interface IHomePageProps {}\n\nexport const HomePage = ({}: IHomePageProps) => {\n  const [bounds, setBounds] = useState<LngLatBounds>()\n\n  const router = useRouter()\n  const caseId = useMemo(() => router.query.caseId, [router.query.caseId])\n\n  function handleMapChange(target: ViewStateChangeEvent['target']) {\n    const bounds = target.getBounds()\n    setBounds(bounds)\n  }\n  return (\n    <div>\n      <Map\n        onDragEnd={(e) => handleMapChange(e.target)}\n        onZoomEnd={(e) => handleMapChange(e.target)}\n        onLoad={(e) => handleMapChange(e.target)}\n      >\n        <Panel position=\"right-center\">\n          <DefaultZoomControls />\n        </Panel>\n        {caseId ? (\n          <DisplayOneCase caseId={+caseId} />\n        ) : (\n          <DisplayAllMarkers bounds={bounds} />\n        )}\n      </Map>\n    </div>\n  )\n}\n\nexport type CaseReport = NonNullable<CaseQuery['case']>['reports'][number]\n\nexport const SidebarInfo = ({\n  caseInfo,\n  reports,\n}: {\n  caseInfo?: CaseQuery['case']\n  reports?: CaseReport[]\n}) => {\n  const user = useAppSelector(selectUser)\n\n  if (!caseInfo?.missingPerson) return null\n  return (\n    <div className=\"z-30 w-full max-w-md px-2 bg-white rounded shadow-lg\">\n      <Accordion\n        defaultOpen\n        titleClassName=\"text-lg px-3\"\n        title={caseInfo.missingPerson.displayName}\n      >\n        <div className=\"space-y-6 overflow-y-auto h-[calc(100vh-8rem)] pr-2\">\n          <MissingPersonInfo\n            missingPerson={caseInfo.missingPerson}\n            status={caseInfo.status}\n          />\n          <ChangeCaseState caseInfo={caseInfo} />\n          <ReportsTimeline reports={reports} />\n          <ContactInfo contact={caseInfo.contact} />\n          <div className=\"flex flex-col gap-3 pt-12\">\n            {user.uid ? (\n              <AddReports />\n            ) : (\n              <LinkButton href=\"/login\">\n                Login to add new report online\n              </LinkButton>\n            )}\n          </div>\n        </div>\n      </Accordion>\n    </div>\n  )\n}\n\nexport const ChangeCaseState = ({\n  caseInfo,\n}: {\n  caseInfo?: CaseQuery['case']\n}) => {\n  const [open, setOpen] = useState(false)\n  const [update, { loading }] = useUpdateCaseStatusMutation()\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useFormUpdateCase()\n\n  if (!caseInfo?.id) {\n    return null\n  }\n\n  const appName = useAppSelector(selectApp)\n\n  return (\n    <div className=\"py-1\">\n      {appName === 'officer' ? (\n        <PlainButton\n          className=\"underline underline-offset-4\"\n          onClick={() => setOpen(true)}\n        >\n          Update case status\n        </PlainButton>\n      ) : null}\n      <Dialog open={open} setOpen={setOpen} title={'Update case status'}>\n        <Form\n          onSubmit={handleSubmit(async ({ status }) => {\n            try {\n              const result = await update({\n                variables: {\n                  updateCaseInput: { status, id: caseInfo?.id },\n                },\n                awaitRefetchQueries: true,\n                refetchQueries: [namedOperations.Query.case],\n              })\n\n              // Check if there are errors in the GraphQL response\n              if (result.errors) {\n                console.error('GraphQL Errors:', result.errors)\n                notification$.next({ message: 'Action failed.' })\n                return\n              }\n\n              // Otherwise, the action was successful\n              notification$.next({ message: 'Action done.' })\n            } catch (e) {\n              // Handle network errors or any other exceptions\n              console.error('Exception caught:', e)\n              notification$.next({ message: 'Action failed.' })\n            }\n          })}\n        >\n          <HtmlLabel title=\"Status\" error={errors.status?.message}>\n            <HtmlSelect {...register('status')}>\n              <option defaultChecked value={Status.Missing}>\n                Missing\n              </option>\n              <option value={Status.FoundSafe}>Found Safe</option>\n              <option value={Status.FoundDeceased}>Found Deceased</option>\n            </HtmlSelect>\n          </HtmlLabel>\n          <Button isLoading={loading} type=\"submit\">\n            Update\n          </Button>\n        </Form>\n      </Dialog>\n    </div>\n  )\n}\n\nexport const DisplayOneCase = ({ caseId }: { caseId: number }) => {\n  const { current: map } = useMap()\n  const { data, loading } = useCaseQuery({\n    variables: { where: { id: caseId } },\n  })\n\n  useSetHeaderText(data?.case.missingPerson.displayName)\n  useSetHeaderPic(data?.case.missingPerson.images?.[0])\n  const sortedReports = useMemo(() => {\n    if (data?.case) {\n      return [...data.case.reports].sort((a, b) => {\n        if (a.time < b.time) return -1\n        if (a.time > b.time) return 1\n        return 0\n      })\n    }\n  }, [data?.case?.reports])\n\n  useEffect(() => {\n    if (!data?.case) {\n      return\n    }\n    const location = data?.case.reports[data?.case.reports?.length - 1].location\n    const lat = location?.latitude || 0\n    const lng = location?.longitude || 0\n    map?.flyTo({ center: { lat, lng }, essential: true })\n  }, [data?.case])\n\n  useSetMapBoundsBasedOnReports({ reports: data?.case.reports || [] })\n\n  const router = useRouter()\n  const [showtime, setShowtime] = useState(true)\n\n  const methods = useFormAddNewReports()\n\n  const formReports = useWatch({\n    control: methods.control,\n    name: 'reports',\n    defaultValue: [],\n  })\n\n  useEffect(() => {\n    if (data?.case?.id) {\n      methods.setValue('caseId', data.case.id)\n    }\n  }, [data?.case?.id, methods])\n\n  const coordinates = useGetCoordinates({\n    reports: [\n      ...(data?.case?.reports?.map(({ time, type, location }) => ({\n        time,\n        type,\n        location: {\n          latitude: location?.latitude || 0,\n          longitude: location?.longitude || 0,\n        },\n      })) || []),\n      ...formReports?.map((rep) => ({\n        type: rep.type,\n        time: rep.time,\n        location: { latitude: rep.lat, longitude: rep.lng },\n      })),\n    ],\n  })\n\n  useKeypress(['Escape'], () => router.push({ pathname: '/' }))\n\n  return (\n    <FormProvider {...methods}>\n      <Panel position=\"right-top\">\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"text\"\n            size=\"none\"\n            onClick={() => {\n              router.push({ pathname: '/' })\n            }}\n          >\n            Show all cases (ESC)\n          </Button>\n        </div>\n        <Switch\n          label={'Show label'}\n          checked={showtime}\n          onChange={setShowtime}\n        />\n      </Panel>\n      <Panel position=\"left-top\">\n        <SidebarInfo caseInfo={data?.case} reports={sortedReports} />\n      </Panel>\n      {sortedReports?.map((report, i) => (\n        <MarkerWithPopupCase\n          key={report.id}\n          report={report}\n          showtime={showtime}\n          lastSeen={Boolean(i + 1 === sortedReports.length)}\n        />\n      ))}\n      <ManageUnapprovedReports />\n      {loading ? (\n        <Panel position=\"center-bottom\">\n          <Loader />\n        </Panel>\n      ) : null}\n      {formReports?.map((report, index) => (\n        <MarkerPopup\n          index={index}\n          key={report.localId}\n          report={report}\n          setLocation={([lng, lat]) => {\n            methods.setValue(`reports.${index}.lat`, lat)\n            methods.setValue(`reports.${index}.lng`, lng)\n          }}\n        />\n      ))}\n\n      <MapLines coordinates={coordinates} />\n    </FormProvider>\n  )\n}\n\nexport const ManageUnapprovedReports = () => {\n  const { data: unapprovedReportsData, loading: unapprovedReportsFetching } =\n    useUnapprovedReportsQuery({\n      variables: {\n        where: { approvedReport: { is: null }, caseId: { equals: 32 } },\n      },\n    })\n\n  const [officerDescription, setOfficerDescription] = useState<string>('')\n\n  const [approveReportMutation, { loading }] = useCreateApprovedReportMutation()\n\n  return (\n    <>\n      {unapprovedReportsData?.reports?.map(\n        ({ id, type, time, description, audio, location }, index) => (\n          <MarkerWithOfficerApproval\n            key={id}\n            lat={location?.latitude || 0}\n            lng={location?.longitude || 0}\n            type={type}\n          >\n            <div className=\"p-2 space-y-1 min-w-[12rem]\">\n              <KeyValue title=\"Description\">{description || '-'}</KeyValue>\n              <KeyValue title=\"Time\">\n                {format(new Date(time), 'PPp') || '-'}\n              </KeyValue>\n              <KeyValue title=\"Type\">{type}</KeyValue>\n              <KeyValue title=\"Audio\">\n                <audio src={audio || ''} controls />\n              </KeyValue>\n              <KeyValue title=\"Location\">\n                <DisplayLocation\n                  lat={location?.latitude || 0}\n                  lng={location?.longitude || 0}\n                />\n              </KeyValue>\n              <div>\n                <HtmlLabel>\n                  <HtmlTextArea\n                    placeholder=\"Enter officer comments here.\"\n                    value={officerDescription}\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                      setOfficerDescription(e.target?.value)\n                    }\n                  />\n                </HtmlLabel>\n                <Button\n                  isLoading={loading}\n                  onClick={async () => {\n                    await approveReportMutation({\n                      variables: {\n                        createApprovedReportInput: {\n                          id: +id,\n                          description: officerDescription,\n                        },\n                      },\n                    })\n                  }}\n                  fullWidth\n                >\n                  Approve\n                </Button>\n              </div>\n            </div>\n          </MarkerWithOfficerApproval>\n        ),\n      )}\n    </>\n  )\n}\n\nfunction usePreviousData<T>(data?: T) {\n  const [displayData, setDisplayData] = useState<T>()\n\n  useEffect(() => {\n    if (data) {\n      setDisplayData(data)\n    }\n  }, [data])\n\n  return displayData\n}\n\nexport const DisplayAllMarkers = ({ bounds }: { bounds?: LngLatBounds }) => {\n  const { data, loading } = useSearchCasesQuery({\n    variables: {\n      dateFilter: {\n        end: '2024-12-01',\n        start: '2022-12-01',\n      },\n      locationFilter: {\n        nw_lat: bounds?.getNorthWest().lat || 0,\n        nw_lng: bounds?.getNorthWest().lng || 0,\n        se_lat: bounds?.getSouthEast().lat || 0,\n        se_lng: bounds?.getSouthEast().lng || 0,\n      },\n    },\n  })\n  const displayData = usePreviousData<SearchCasesQuery['searchCases']>(\n    data?.searchCases,\n  )\n\n  return (\n    <div>\n      <Panel position=\"right-top\">\n        <div className=\"flex\">\n          <CurrentLocationButton moveToUserLocationOnLoad={true} />\n          <SearchPlaceBox />\n        </div>\n      </Panel>\n      {loading ? (\n        <Panel position=\"center-bottom\">\n          <Loader />\n        </Panel>\n      ) : data?.searchCases.length === 0 ? (\n        <Panel position=\"center-bottom\">\n          <div className=\"px-3 py-2 border rounded-full shadow-lg text-gray backdrop-blur-sm\">\n            No reports in this area.\n          </div>\n        </Panel>\n      ) : null}\n      {displayData?.map((caseInfo) => (\n        <MarkerWithPopup key={caseInfo.case?.id} marker={caseInfo} />\n      ))}\n    </div>\n  )\n}\n\nexport const MarkerWithPopupCase = ({\n  report,\n  lastSeen,\n  showtime,\n}: {\n  report: NonNullable<CaseQuery['case']>['reports'][0]\n  lastSeen?: boolean\n  showtime?: boolean\n}) => {\n  const [showPopup, setShowPopup] = useState(false)\n  const { current: map } = useMap()\n\n  if (!report.location?.latitude) {\n    return null\n  }\n\n  let MarkerIcon = IconPinned\n  if (report.type === ReportType.Lead) MarkerIcon = IconBulb\n  else if (report.type === ReportType.GeneralInformation)\n    MarkerIcon = IconInfoSquare\n\n  return (\n    <div>\n      <AnimatePresence>\n        {showPopup ? (\n          <Popup\n            key={report.id}\n            latitude={report?.location?.latitude || 0}\n            longitude={report?.location?.longitude || 0}\n            onOpen={() => console.log('Opened')}\n            closeOnClick={false}\n            anchor=\"bottom\"\n            offset={36}\n            closeButton={false}\n          >\n            <PopupContent onClose={() => setShowPopup(false)}>\n              <div className=\"p-2 space-y-1\">\n                <div>\n                  <div>{format(new Date(report?.time), 'p') || '-'}</div>\n                  <div className=\"text-lg\">\n                    {format(new Date(report?.time), 'PP') || '-'}\n                  </div>\n                </div>\n                <div>{report?.description || '-'}</div>\n                <div>{report?.type || '-'}</div>\n                <div>\n                  {report.audio ? <audio src={report.audio} controls /> : null}\n                </div>\n              </div>\n            </PopupContent>\n          </Popup>\n        ) : null}\n      </AnimatePresence>\n\n      <Marker\n        anchor=\"bottom\"\n        latitude={report?.location?.latitude}\n        longitude={report?.location?.longitude}\n        onClick={() => {\n          setShowPopup((state) => !state)\n        }}\n      >\n        <MarkerIcon\n          className={`cursor-pointer ${\n            report.approvedReport\n              ? 'text-black'\n              : 'text-gray-300 fill-gray-300 animate-pulse'\n          } ${lastSeen && 'fill-black'}`}\n        />\n        {showtime ? (\n          <div className=\"absolute py-2 text-xs w-36\">\n            <div>{format(new Date(report.time), 'PP')}</div>\n            <div>{format(new Date(report.time), 'p')}</div>\n          </div>\n        ) : null}\n      </Marker>\n    </div>\n  )\n}\n\nexport const MarkerWithPopup = ({\n  marker,\n}: {\n  marker: SearchCasesQuery['searchCases'][number]\n}) => {\n  const [showPopup, setShowPopup] = useState(false)\n  useKeypress(['Escape'], () => setShowPopup(false))\n  const router = useRouter()\n  if (\n    !marker.location?.latitude ||\n    !marker.location?.longitude ||\n    !marker.case?.id\n  ) {\n    return null\n  }\n\n  return (\n    <div key={marker.case?.id}>\n      {showPopup ? (\n        <Popup\n          latitude={marker.location.latitude}\n          longitude={marker.location.longitude}\n          onOpen={() => console.log('Opened')}\n          closeOnClick={false}\n          anchor=\"bottom\"\n          offset={36}\n          closeButton={false}\n        >\n          <PopupContent onClose={() => setShowPopup(false)}>\n            <div className=\"space-y-1 rounded\">\n              <Image\n                src={marker.case.missingPerson.images?.[0]}\n                alt=\"\"\n                width={200}\n                height={200}\n              />\n              <div className=\"p-2 space-y-2\">\n                <KeyValue title=\"Name\">\n                  {marker.case.missingPerson.displayName || '-'}\n                </KeyValue>\n                <KeyValue title=\"Gender\">\n                  {marker.case.missingPerson.gender || '-'}\n                </KeyValue>\n                <KeyValue title=\"Status\">{marker.case?.status || '-'}</KeyValue>\n              </div>\n              <Button\n                className=\"w-full\"\n                onClick={() =>\n                  router.push({\n                    pathname: '/',\n                    query: { caseId: marker.case?.id },\n                  })\n                }\n              >\n                Detailed view\n              </Button>\n            </div>\n          </PopupContent>\n        </Popup>\n      ) : null}\n\n      <Marker\n        anchor=\"bottom\"\n        latitude={marker.location.latitude}\n        longitude={marker.location.longitude}\n        onClick={() => {\n          setShowPopup((state) => !state)\n        }}\n      >\n        <Image\n          width={30}\n          height={30}\n          className=\"border border-white rounded shadow-lg cursor-pointer aspect-[3/4] object-cover outline-gray-300 shadow-black/50\"\n          alt={marker.case?.missingPerson.displayName || ''}\n          src={\n            marker.case?.missingPerson?.images?.length\n              ? marker.case?.missingPerson?.images[0]\n              : ''\n          }\n        />\n        <div className=\"absolute px-1 py-1 mt-1 font-semibold leading-3 text-center -translate-x-1/2 rounded-sm bg-white/50 left-1/2\">\n          {marker.case.missingPerson.displayName}\n        </div>\n      </Marker>\n    </div>\n  )\n}\n\nexport const PopupContent = ({\n  onClose,\n  children,\n}: {\n  onClose: () => void\n  children: ReactNode\n}) => {\n  return (\n    <div className=\"grid grid-cols-1 grid-rows-1 \">\n      <div className=\"col-start-1 row-start-1 \">{children}</div>\n      <div className=\"flex justify-end col-start-1 row-start-1 p-0 items-top\">\n        <button\n          type=\"button\"\n          className=\"absolute top-0 right-0 p-0.5 rounded-bl bg-black/30 hover:bg-black/40\"\n          onClick={onClose}\n        >\n          <IconX className=\"w-5 h-5 text-white\" />\n        </button>\n      </div>\n    </div>\n  )\n}\n","import { ReactNode, useEffect, useState } from 'react'\nimport Image from 'next/image'\nimport { Popup, useMap } from 'react-map-gl'\nimport { Controller, useFormContext, useWatch } from 'react-hook-form'\nimport { FormTypeAddNewCase } from '@findus-org/forms/src/addNewCase'\nimport {\n  Gender,\n  ReportType,\n  Status,\n  useCreateCaseMutation,\n} from '@findus-org/network/src/generated'\nimport { Button } from '../../atoms/Button'\nimport { HtmlInput } from '../../atoms/HtmlInput'\nimport { HtmlLabel } from '../../atoms/HtmlLabel'\nimport HtmlSelect from '../../atoms/HtmlSelect'\nimport { Map } from '../../organisms/Map'\n\nimport { HtmlTextArea } from '../../atoms/HtmlTextArea'\nimport { useFieldArray } from 'react-hook-form'\nimport { Form } from '../../atoms/Form'\nimport {\n  IconBulb,\n  IconEye,\n  IconEyeClosed,\n  IconInfoSquare,\n  IconPinned,\n  IconPinnedFilled,\n  IconPlus,\n  IconX,\n} from '@tabler/icons-react'\nimport { Marker } from '../../organisms/Map/MapMarker'\n\nimport { PopupContent } from '../Home/Home'\nimport { MapLines } from '../../molecules/MapLines'\n\nimport { format } from 'date-fns'\nimport { AudioRecord } from '../../molecules/AudioRecord'\n\nimport { useRouter } from 'next/navigation'\nimport { notification$ } from '@findus-org/util/subjects'\nimport { makeId, useImageUpload } from '@findus-org/util'\nimport { TitleValue } from '../../atoms/TitleValue'\nimport { Panel } from '../../organisms/Map/Panel'\nimport { DefaultZoomControls } from '../../organisms/Map/ZoomControls/ZoomControls'\nimport { SearchPlaceBox } from '../../organisms/SearchPlaceBox'\nimport { ImageUploadPreview } from '../../organisms/ImageUploadPreview'\nimport { useAppDispatch, useAppSelector } from '@findus-org/store'\nimport { setVictimName, setVictimPic } from '@findus-org/store/utils'\nimport Accordion from '../../molecules/Accordion'\nimport { PlainButton } from '../../atoms/PlainButton'\nimport { selectUid } from '@findus-org/store/user'\nimport { Switch } from '../../atoms/Switch'\nimport { FormError } from '../../atoms/FormError'\n\nexport interface IAddNewCaseProps {}\n\nexport const AddNewCase = ({}: IAddNewCaseProps) => {\n  const {\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useFormContext<FormTypeAddNewCase>()\n\n  const { displayName, images } = useWatch<FormTypeAddNewCase>()\n  useSetHeaderText(displayName)\n  useSetHeaderPic(images?.[0] ? URL.createObjectURL(images?.[0]) : '')\n\n  const [createCaseMutation, { loading, data, error }] = useCreateCaseMutation()\n\n  const router = useRouter()\n  useEffect(() => {\n    if (data) {\n      notification$.next({\n        message: 'Case created successfully.',\n        type: 'success',\n      })\n      reset()\n      router.push('/')\n    }\n\n    if (error)\n      notification$.next({\n        message: 'Case creation failed. Please try again.',\n        type: 'error',\n      })\n  }, [data, error, router])\n  const [{ uploading }, uploadImages] = useImageUpload()\n  const uid = useAppSelector(selectUid)\n\n  useEffect(() => {\n    if (errors) {\n      console.log('errors while submitting... ', errors)\n    }\n  }, [errors])\n\n  return (\n    <div>\n      <Form\n        onSubmit={handleSubmit(\n          async ({\n            description,\n            displayName,\n            dob,\n            gender,\n            height,\n            images,\n            reports,\n            status,\n            weight,\n            contact,\n          }) => {\n            const uploadedImages = await uploadImages(images)\n\n            const uploadedReportImagesPromises = reports.map((report) =>\n              uploadImages(report.images),\n            )\n            const uploadedReportImages = await Promise.all(\n              uploadedReportImagesPromises,\n            )\n\n            await createCaseMutation({\n              variables: {\n                createCaseInput: {\n                  reports: reports.map(\n                    (\n                      {\n                        audio,\n                        description,\n                        lat,\n                        lng,\n                        showPublic,\n                        time,\n                        type,\n                        address,\n                        officerDescription,\n                      },\n                      index,\n                    ) => ({\n                      description,\n                      type,\n                      audio,\n                      location: {\n                        latitude: lat || 0,\n                        longitude: lng || 0,\n                        address: address || '',\n                      },\n                      time,\n                      witnessId: uid,\n                      images: uploadedReportImages[index],\n                      showPublic,\n                      officerDescription,\n                    }),\n                  ),\n                  missingPerson: {\n                    description,\n                    displayName,\n                    dob,\n                    gender,\n                    height,\n                    images: uploadedImages,\n                    weight,\n                  },\n                  status,\n                  contact: contact.map((c) => c.number),\n                },\n              },\n            })\n          },\n        )}\n        className=\"relative grid gap-2 md:grid-cols-2\"\n      >\n        <div className=\"flex flex-col gap-4 p-3 overflow-y-auto bg-white\">\n          <AddCaseDetails />\n          <AddContacts />\n\n          <AddReports />\n          <Button type=\"submit\" fullWidth isLoading={loading || uploading}>\n            Create Case\n          </Button>\n        </div>\n\n        <div>\n          <ShowMap />\n        </div>\n      </Form>\n    </div>\n  )\n}\n\nexport const useSetHeaderText = (displayName = '') => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (displayName) {\n      dispatch(setVictimName(displayName))\n    } else {\n      dispatch(setVictimName(''))\n    }\n\n    return () => {\n      dispatch(setVictimName(''))\n    }\n  }, [displayName])\n}\n\nexport const useSetHeaderPic = (url = '') => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (url) {\n      dispatch(setVictimPic(url))\n    } else {\n      dispatch(setVictimPic(''))\n    }\n\n    return () => {\n      dispatch(setVictimPic(''))\n    }\n  }, [url])\n}\n\nexport const AddCaseDetails = () => {\n  const {\n    register,\n    formState: { errors },\n    control,\n    resetField,\n  } = useFormContext<FormTypeAddNewCase>()\n  const formData = useWatch<FormTypeAddNewCase>()\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <FormGrid>\n        <ImageUploadPreview\n          src={formData.images?.[0] || undefined}\n          clearImage={() => resetField('images')}\n        >\n          <Controller\n            control={control}\n            name={`images`}\n            render={({ field }) => (\n              <HtmlInput\n                type=\"file\"\n                accept=\"image/*\"\n                multiple={true}\n                onChange={(e) => field.onChange(e?.target?.files)}\n              />\n            )}\n          />\n        </ImageUploadPreview>\n      </FormGrid>\n      <HtmlLabel title=\"Name\" error={errors.displayName?.message}>\n        <HtmlInput placeholder=\"Enter the name\" {...register('displayName')} />\n      </HtmlLabel>\n\n      <HtmlLabel title=\"Status\" error={errors.status?.message}>\n        <HtmlSelect {...register('status')}>\n          <option defaultChecked value={Status.Missing}>\n            Missing\n          </option>\n          <option value={Status.FoundSafe}>Found Safe</option>\n          <option value={Status.FoundDeceased}>Found Deceased</option>\n        </HtmlSelect>\n      </HtmlLabel>\n      <HtmlLabel title=\"Description\" error={errors.displayName?.message}>\n        <HtmlTextArea\n          placeholder=\"Describe the missing person\"\n          {...register('description')}\n        />\n      </HtmlLabel>\n      <FormGrid>\n        <HtmlLabel title=\"dob\" error={errors.dob?.message}>\n          <HtmlInput type=\"date\" {...register('dob')} required />\n        </HtmlLabel>\n        <HtmlLabel title=\"Gender\" error={errors.gender?.message}>\n          <HtmlSelect {...register('gender')}>\n            <option defaultChecked value={Gender.Female}>\n              Female\n            </option>\n            <option defaultChecked value={Gender.Male}>\n              Male\n            </option>\n            <option defaultChecked value={Gender.NonBinary}>\n              Non Binary\n            </option>\n            <option defaultChecked value={Gender.PreferNotToSay}>\n              Prefer Not To Say\n            </option>\n          </HtmlSelect>\n        </HtmlLabel>\n      </FormGrid>\n      <FormGrid>\n        <HtmlLabel title=\"Height\" units=\"cm\" error={errors.height?.message}>\n          <HtmlInput\n            type=\"number\"\n            {...register('height', { valueAsNumber: true })}\n          />\n        </HtmlLabel>\n        <HtmlLabel\n          title=\"Weight\"\n          units=\"kg\"\n          optional\n          error={errors.weight?.message}\n        >\n          <HtmlInput\n            type=\"number\"\n            {...register('weight', { valueAsNumber: true })}\n          />\n        </HtmlLabel>\n      </FormGrid>\n    </div>\n  )\n}\n\nexport const MarkerWithOfficerApproval = ({\n  lat,\n  lng,\n  type,\n  children,\n}: {\n  lat: number\n  lng: number\n  type: ReportType\n  children: ReactNode\n}) => {\n  const [showPopup, setShowPopup] = useState(false)\n\n  return (\n    <>\n      {showPopup ? (\n        <Popup\n          latitude={lat}\n          longitude={lng}\n          closeOnClick={false}\n          anchor=\"bottom\"\n          offset={24}\n          closeButton={false}\n        >\n          <PopupContent onClose={() => setShowPopup(false)}>\n            {children}\n          </PopupContent>\n        </Popup>\n      ) : null}\n      <Marker\n        anchor=\"bottom\"\n        longitude={lng}\n        latitude={lat}\n        onClick={() => {\n          setShowPopup((state) => !state)\n        }}\n      >\n        <div className=\"cursor-pointer animate-pulse\">\n          {type === ReportType.Sighting ? (\n            <IconPinned />\n          ) : type === ReportType.Lead ? (\n            <IconBulb />\n          ) : (\n            <IconInfoSquare />\n          )}\n        </div>\n      </Marker>\n    </>\n  )\n}\n\nexport const MarkerPopup = ({\n  report,\n  setLocation,\n}: {\n  report: Partial<FormTypeAddNewCase['reports'][number]>\n  index: number\n  setLocation: (location: [number, number]) => void\n}) => {\n  const [showPopup, setShowPopup] = useState(false)\n\n  const imageSrc = report.images?.[0]\n    ? URL.createObjectURL(report.images?.[0])\n    : ''\n\n  return (\n    <div>\n      {showPopup ? (\n        <Popup\n          latitude={report.lat || 0}\n          longitude={report.lng || 0}\n          closeOnClick={false}\n          anchor=\"bottom\"\n          offset={24}\n          closeButton={false}\n        >\n          <PopupContent onClose={() => setShowPopup(false)}>\n            {imageSrc ? (\n              <Image\n                alt=\"\"\n                width={300}\n                height={200}\n                className=\"object-cover aspect-square\"\n                src={imageSrc}\n              />\n            ) : null}\n            <div className=\"p-2 space-y-1\">\n              <div>\n                {report.time ? format(new Date(report.time), 'PPp') : '-'}\n              </div>\n              <div className=\"text-xs font-medium text-left\">\n                {report.type?.split('_').join(' ')}\n              </div>\n\n              <div>{report.description || ''}</div>\n\n              <TitleValue title=\"Location\">\n                <DisplayLocation lat={report.lat || 0} lng={report.lng || 0} />\n              </TitleValue>\n            </div>\n          </PopupContent>\n        </Popup>\n      ) : null}\n      <Marker\n        anchor=\"bottom\"\n        key={report.localId}\n        draggable\n        longitude={report.lng || 0}\n        latitude={report.lat || 0}\n        onClick={() => {\n          setShowPopup((state) => !state)\n        }}\n        onDragStart={() => setShowPopup(false)}\n        onDragEnd={({ lngLat }) => {\n          setLocation([lngLat.lng, lngLat.lat])\n          setShowPopup(false)\n        }}\n      >\n        <div\n          className={`cursor-pointer ${\n            report.showPublic ? 'text-black' : 'text-black/30'\n          }`}\n        >\n          {report.type === ReportType.Sighting ? (\n            <IconPinnedFilled />\n          ) : report.type === ReportType.Lead ? (\n            <IconBulb />\n          ) : (\n            <IconInfoSquare />\n          )}\n        </div>\n      </Marker>\n    </div>\n  )\n}\n\nexport const DisplayLocation = ({ lat, lng }: { lat: number; lng: number }) => {\n  if (!lat || !lng) return null\n  return (\n    <div className=\"flex gap-2 text-xs\">\n      <div className=\"px-1 bg-gray-200 \">{lat.toFixed(2)}</div>\n      <div className=\"px-1 bg-gray-200 \">{lng.toFixed(2)}</div>\n    </div>\n  )\n}\n\nexport const SearchPlaceBoxContainer = () => {\n  const { current: map } = useMap()\n  return (\n    <SearchPlaceBox\n      setLocationInfo={(locationInfo) => {\n        const {\n          latLng: [lat, lng],\n        } = locationInfo\n        map?.flyTo({ center: { lat, lng }, essential: true })\n      }}\n    />\n  )\n}\n\nexport const FormGrid = ({ children }: { children: ReactNode }) => (\n  <div className=\"grid grid-cols-2 gap-2\">{children}</div>\n)\n\nexport const AddContacts = () => {\n  const {\n    register,\n    formState: { errors },\n    control,\n  } = useFormContext<FormTypeAddNewCase>()\n  const {\n    fields: fieldsContact,\n    append: appendContactField,\n    remove: removeContactField,\n  } = useFieldArray({\n    control,\n    name: 'contact',\n  })\n\n  return (\n    <div className=\"p-3 bg-gray-25\">\n      <div className=\"flex items-center justify-between\">\n        <div>Contacts</div>\n        <Button\n          onClick={() => {\n            appendContactField({ number: '' })\n          }}\n          variant=\"text\"\n        >\n          <IconPlus />\n        </Button>\n      </div>\n\n      <FormError error={errors.contact && errors.contact?.message} />\n\n      <div className=\"grid grid-cols-2 gap-2\">\n        {fieldsContact.map((item, index) => (\n          <div className=\"flex\">\n            <HtmlInput {...register(`contact.${index}.number`)} />\n            <PlainButton\n              className=\"p-1\"\n              onClick={() => {\n                removeContactField(index)\n              }}\n            >\n              <IconX className=\"w-5 h-5 text-gray-600 \" />\n            </PlainButton>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport const AccordionTitle = ({\n  time,\n  description,\n}: {\n  time: string\n  description: string\n}) => {\n  return (\n    <div>\n      <div> {time}</div>\n      <div className=\"text-xs\">{description}</div>\n    </div>\n  )\n}\n\nexport const AddReports = () => {\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext<FormTypeAddNewCase>()\n  const { myMap } = useMap()\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'reports',\n  })\n  const { reports } = useWatch<FormTypeAddNewCase>({ control })\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"text-lg\">Reports</div>\n      <FormError error={errors.reports?.message} />\n      <div className=\"p-3 space-y-3 bg-gray-25\">\n        {fields.map((field, index) => (\n          <Accordion\n            defaultOpen\n            title={\n              <div className=\"flex items-center gap-2\">\n                <div>\n                  {reports?.[index]?.showPublic ? (\n                    <IconEye />\n                  ) : (\n                    <IconEyeClosed />\n                  )}\n                </div>\n                <div>\n                  <div className=\"\">\n                    {reports?.[index]?.time\n                      ? format(new Date(reports?.[index]?.time || ''), 'PPp')\n                      : null}\n                  </div>\n                  <div className=\"text-xs\">\n                    {reports?.[index]?.description?.substring(0, 100) || ''}...\n                  </div>\n                </div>\n              </div>\n            }\n          >\n            <div className=\"flex justify-end\">\n              <Button\n                variant=\"text\"\n                size=\"none\"\n                color=\"error\"\n                onClick={() => {\n                  remove(index)\n                }}\n              >\n                Remove\n              </Button>\n            </div>\n            <FormGridItem index={index} />\n\n            <div className=\"flex justify-between mt-1\">\n              <Button\n                variant=\"text\"\n                size=\"none\"\n                onClick={() =>\n                  myMap?.flyTo({\n                    center: [\n                      reports?.[index].lng || 0,\n                      reports?.[index].lat || 0,\n                    ],\n                    essential: true,\n                  })\n                }\n              >\n                Go to location\n              </Button>\n            </div>\n          </Accordion>\n        ))}\n        <Button\n          variant=\"outlined\"\n          fullWidth\n          onClick={() => {\n            const time = new Date().toISOString().split('.')[0]\n\n            append({\n              localId: makeId(),\n              lat: myMap?.getCenter().lat || 0,\n              lng: myMap?.getCenter().lng || 0,\n              description: '',\n              type: ReportType.Sighting,\n              time: time,\n              audio: null,\n              images: [],\n            })\n          }}\n        >\n          Add report <IconPlus className=\"inline\" />\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport const FormGridItem = ({ index }: { index: number }) => {\n  const { control, register, resetField, setValue } =\n    useFormContext<FormTypeAddNewCase>()\n  const { reports } = useWatch<FormTypeAddNewCase>({ control })\n\n  useFieldArray({\n    control,\n    name: 'reports',\n  })\n  const [showPublic, setShowPublic] = useState(false)\n\n  return (\n    <FormGrid>\n      <ImageUploadPreview\n        src={reports?.[index]?.images?.[0] || undefined}\n        clearImage={() => resetField(`reports.${index}.images`)}\n      >\n        <Controller\n          control={control}\n          name={`reports.${index}.images`}\n          render={({ field }) => (\n            <HtmlInput\n              type=\"file\"\n              accept=\"image/*\"\n              multiple={true}\n              onChange={(e) => field.onChange(e?.target?.files)}\n            />\n          )}\n        />\n      </ImageUploadPreview>\n      <div className=\"flex flex-col gap-3\">\n        <HtmlLabel title=\"Time\">\n          <Controller\n            control={control}\n            name={`reports.${index}.time`}\n            render={({ field }) => (\n              <HtmlInput {...field} type=\"datetime-local\" />\n            )}\n          />\n        </HtmlLabel>\n        <HtmlLabel title=\"Type\">\n          <HtmlSelect {...register(`reports.${index}.type`)}>\n            <option defaultChecked value={ReportType.Sighting}>\n              Sighting\n            </option>\n            <option defaultChecked value={ReportType.Lead}>\n              Lead\n            </option>\n            <option defaultChecked value={ReportType.GeneralInformation}>\n              General Information\n            </option>\n          </HtmlSelect>\n        </HtmlLabel>\n        <HtmlLabel title=\"Address\" optional>\n          <HtmlTextArea {...register(`reports.${index}.address`)} />\n        </HtmlLabel>\n        <HtmlLabel title=\"Voice\" optional>\n          <AudioRecord\n            setAudio={(url) => setValue(`reports.${index}.audio`, url)}\n          />\n        </HtmlLabel>{' '}\n        <HtmlLabel title=\"Description\">\n          <HtmlTextArea {...register(`reports.${index}.description`)} />\n        </HtmlLabel>\n        <DisplayLocation\n          lat={reports?.[index]?.lat || 0}\n          lng={reports?.[index]?.lng || 0}\n        />\n        <Switch\n          label={'Public'}\n          checked={showPublic}\n          onChange={function (checked: boolean): void {\n            setValue(`reports.${index}.showPublic`, checked)\n            setShowPublic(checked)\n          }}\n        />\n        {showPublic ? (\n          <HtmlLabel title=\"Officer Description\">\n            <HtmlTextArea\n              {...register(`reports.${index}.officerDescription`)}\n            />\n          </HtmlLabel>\n        ) : null}\n      </div>\n    </FormGrid>\n  )\n}\n\nexport const ShowMap = () => {\n  const { reports } = useWatch<FormTypeAddNewCase>()\n  const { setValue } = useFormContext<FormTypeAddNewCase>()\n  return (\n    <div className=\"sticky top-16\">\n      <Map id=\"myMap\">\n        <Panel position=\"right-center\" className=\"px-2 py-1 rounded-t\">\n          <DefaultZoomControls />\n        </Panel>\n        <Panel position=\"left-top\">\n          <SearchPlaceBoxContainer />\n        </Panel>\n        {reports?.map((report, index) => {\n          return (\n            <MarkerPopup\n              index={index}\n              key={report.localId}\n              report={report}\n              setLocation={([lng, lat]) => {\n                setValue(`reports.${index}.lat`, lat)\n                setValue(`reports.${index}.lng`, lng)\n              }}\n            />\n          )\n        })}\n        <MapLines\n          coordinates={\n            reports\n              ?.filter((rep) => Boolean(rep.time))\n              ?.filter(\n                (rep) =>\n                  rep.type === ReportType.Sighting &&\n                  rep.lng !== undefined &&\n                  rep.lat !== undefined,\n              )\n              .sort((a, b) => ((a?.time || 0) > (b?.time || 0) ? 1 : -1))\n              .map((rep) => [rep.lng as number, rep.lat as number]) || []\n          }\n        />\n      </Map>\n    </div>\n  )\n}\n","import {\n  IconBulb,\n  IconInfoSquare,\n  IconPinned,\n  IconPlus,\n} from '@tabler/icons-react'\n\nimport { format } from 'date-fns'\nimport Link from 'next/link'\nimport { useRouter } from 'next/router'\nimport { useMemo, useState } from 'react'\nimport { useFormCreateWitness } from '@findus-org/forms/src/createWitness'\nimport { useFieldArray, useWatch } from 'react-hook-form'\nimport {\n  LngLatBounds,\n  LngLatBoundsLike,\n  Marker,\n  Popup,\n  useMap,\n} from 'react-map-gl'\n\nimport {\n  CaseQuery,\n  ReportType,\n  useCreateWitnessMutation,\n  useCaseQuery,\n  useWitnessMeQuery,\n  namedOperations,\n} from '@findus-org/network/src/generated'\n\nimport { Button } from '../../atoms/Button'\nimport { Container } from '../../atoms/Container'\nimport { Form } from '../../atoms/Form'\nimport { HtmlInput } from '../../atoms/HtmlInput'\nimport { HtmlLabel } from '../../atoms/HtmlLabel'\nimport HtmlSelect from '../../atoms/HtmlSelect'\nimport { HtmlTextArea } from '../../atoms/HtmlTextArea'\nimport { AudioRecord } from '../../molecules/AudioRecord'\nimport { Map } from '../../organisms/Map'\nimport { Panel } from '../../organisms/Map/Panel'\nimport { DisplayLocation, MarkerPopup } from '../AddNewCase/AddNewCase'\n\nimport { PopupContent } from '../Home/Home'\nimport { MapLines } from '../../molecules/MapLines'\n\nimport { useFormAddNewReports } from '@findus-org/forms/src/addNewReports'\nimport { useAppSelector } from '@findus-org/store'\nimport { selectUid } from '@findus-org/store/user'\nimport { convertReportsToCoordinates, makeId } from '@findus-org/util'\nimport { TitleValue } from '../../atoms/TitleValue'\n\nexport interface INewReportProps {}\n\nexport const NewReport = ({}: INewReportProps) => {\n  const uid = useAppSelector(selectUid)\n  const witness = useWitnessMeQuery()\n\n  if (!uid) return <Link href=\"/login\">Login</Link>\n\n  if (!witness.data?.witnessMe) {\n    return (\n      <Container className=\"flex items-center justify-center h-96 bg-gray-50\">\n        <div className=\"w-full max-w-md\">\n          <div>Create witness account.</div>\n          <div>\n            <CreateWitness uid={uid} />\n          </div>\n        </div>\n      </Container>\n    )\n  }\n  return <CreateNewReport />\n}\n\nexport const CreateWitness = ({ uid }: { uid: string }) => {\n  const [createWitnessMutation, { loading, data }] = useCreateWitnessMutation()\n\n  const { register, handleSubmit } = useFormCreateWitness()\n  return (\n    <Form\n      onSubmit={handleSubmit(async (data) => {\n        await createWitnessMutation({\n          variables: {\n            createWitnessInput: { uid, name: data.name },\n          },\n          awaitRefetchQueries: true,\n          refetchQueries: [namedOperations.Query.witnessMe],\n        })\n      })}\n    >\n      <HtmlLabel title=\"Name\">\n        <HtmlInput {...register('name')} />\n      </HtmlLabel>\n      <Button isLoading={loading} type=\"submit\">\n        Create witness\n      </Button>\n    </Form>\n  )\n}\n\nexport const useGetCoordinates = ({\n  reports,\n}: {\n  reports?: {\n    type: ReportType\n    time: string\n    location: { latitude: number; longitude: number }\n  }[]\n}): [number, number][] | undefined => {\n  return useMemo(\n    () =>\n      reports\n        ?.filter((rep) => rep.type === ReportType.Sighting)\n        .sort((a, b) => {\n          if (new Date(a.time) > new Date(b.time)) {\n            return 1\n          } else {\n            return -1\n          }\n        })\n        .map((rep) => rep.location)\n        .filter(Boolean)\n        //   Todo: Hack implementation\n        .map((location) => [location!.longitude, location!.latitude]),\n    [reports],\n  )\n}\n\nexport const getBounds = (\n  coordinates?: [number, number][],\n): LngLatBoundsLike | undefined => {\n  if (!coordinates) return\n  let minLat = 90,\n    minLng = 180,\n    maxLat = -90,\n    maxLng = -180\n  coordinates.forEach((coordinate) => {\n    minLat = Math.min(minLat, coordinate[1])\n    minLng = Math.min(minLng, coordinate[0])\n    maxLat = Math.max(maxLat, coordinate[1])\n    maxLng = Math.max(maxLng, coordinate[0])\n  })\n  return [\n    [minLng, minLat],\n    [maxLng, maxLat],\n  ]\n}\n\nexport const CreateNewReport = () => {\n  const [bounds, setBounds] = useState<LngLatBounds>()\n  const router = useRouter()\n  const caseId =\n    typeof router.query.id === 'string' ? parseInt(router.query.id) : 0\n\n  const {\n    register,\n    formState: { errors },\n    control,\n    setValue,\n    watch,\n    handleSubmit,\n  } = useFormAddNewReports()\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'reports',\n  })\n\n  const formReports = useWatch({\n    control,\n    name: 'reports',\n    defaultValue: [],\n  })\n\n  const { data, loading } = useCaseQuery({\n    variables: { where: { id: caseId } },\n  })\n\n  const { mapNewReport } = useMap()\n\n  const coordinates = useGetCoordinates({\n    reports: [\n      ...(data?.case?.reports?.map(({ time, type, location }) => ({\n        time,\n        type,\n        location: {\n          latitude: location?.latitude || 0,\n          longitude: location?.longitude || 0,\n        },\n      })) || []),\n      ...formReports?.map((rep) => ({\n        type: rep.type,\n        time: rep.time,\n        location: { latitude: rep.lat, longitude: rep.lng },\n      })),\n    ],\n  })\n\n  return (\n    <Container className=\"flex\">\n      <Form\n        className=\"p-2 overflow-y-scroll min-w-[20vw] h-[90vh] space-y-6\"\n        onSubmit={handleSubmit((data) => {\n          console.log('Data', data)\n        })}\n      >\n        {fields.length === 0 ? (\n          <div className=\"flex items-center justify-center h-20\">\n            No reports added.\n          </div>\n        ) : null}\n        {fields.map((field, index) => (\n          <div key={field.localId} className=\"p-3 bg-gray-50\">\n            <div className=\"flex items-center justify-between\">\n              <div>Report #{index + 1}</div>\n              <Button\n                variant=\"text\"\n                size=\"none\"\n                color=\"error\"\n                onClick={() => remove(index)}\n              >\n                Remove\n              </Button>\n            </div>\n            <HtmlLabel title=\"Time\">\n              <HtmlInput\n                step=\"any\"\n                type=\"datetime-local\"\n                {...register(`reports.${index}.time`)}\n              />\n            </HtmlLabel>\n            <HtmlLabel title=\"Address\" optional>\n              <HtmlInput {...register(`reports.${index}.address`)} />\n            </HtmlLabel>\n            <HtmlLabel title=\"Voice\" optional>\n              <AudioRecord\n                setAudio={(url) => setValue(`reports.${index}.audio`, url)}\n              />\n            </HtmlLabel>\n            <HtmlLabel title=\"Type\">\n              <HtmlSelect {...register(`reports.${index}.type`)}>\n                <option defaultChecked value={ReportType.Sighting}>\n                  Sighting\n                </option>\n                <option defaultChecked value={ReportType.Lead}>\n                  Lead\n                </option>\n                <option defaultChecked value={ReportType.GeneralInformation}>\n                  General Information\n                </option>\n              </HtmlSelect>\n            </HtmlLabel>\n            <HtmlLabel title=\"Description\">\n              <HtmlTextArea {...register(`reports.${index}.description`)} />\n            </HtmlLabel>\n            <DisplayLocation\n              lat={formReports[index]?.lat}\n              lng={formReports[index]?.lng}\n            />\n\n            <div className=\"flex justify-between mt-1\">\n              <Button\n                variant=\"text\"\n                size=\"none\"\n                onClick={() =>\n                  mapNewReport?.flyTo({\n                    center: [formReports[index].lng, formReports[index].lat],\n                  })\n                }\n              >\n                Go to location\n              </Button>\n            </div>\n          </div>\n        ))}\n        <Button\n          variant=\"outlined\"\n          fullWidth\n          onClick={() => {\n            const time = new Date().toISOString().split('.')[0]\n            append({\n              localId: makeId(),\n              lat: mapNewReport?.getCenter().lat || 0,\n              lng: mapNewReport?.getCenter().lng || 0,\n              description: '',\n              type: ReportType.Sighting,\n              time: time,\n              audio: null,\n            })\n          }}\n        >\n          Add report <IconPlus className=\"inline\" />\n        </Button>\n        <Button fullWidth type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n      <Map id=\"mapNewReport\">\n        {!data?.case?.reports.length && (\n          <Panel position=\"center-center\">\n            <div className=\"p-3 bg-white/30 backdrop-blur-sm text-md\">\n              No reports found.\n            </div>\n          </Panel>\n        )}\n        {data?.case?.reports?.map((report, index) => (\n          <MarkerPopupDisplay key={report.id} report={report} />\n        ))}\n\n        {formReports?.map((report, index) => (\n          <MarkerPopup\n            index={index}\n            key={report.localId}\n            report={report}\n            setLocation={([lng, lat]) => {\n              setValue(`reports.${index}.lat`, lat)\n              setValue(`reports.${index}.lng`, lng)\n            }}\n          />\n        ))}\n\n        <MapLines coordinates={coordinates} />\n      </Map>\n    </Container>\n  )\n}\n\nexport const MarkerPopupDisplay = ({\n  report,\n}: {\n  report: NonNullable<CaseQuery['case']>['reports'][number]\n}) => {\n  const [showPopup, setShowPopup] = useState(false)\n\n  return (\n    <div>\n      {showPopup ? (\n        <Popup\n          latitude={report.location?.latitude || 0}\n          longitude={report.location?.longitude || 0}\n          onOpen={() => console.log('Opened')}\n          closeOnClick={false}\n          anchor=\"bottom\"\n          offset={24}\n          closeButton={false}\n        >\n          <PopupContent onClose={() => setShowPopup(false)}>\n            <div className=\"p-2 space-y-1\">\n              <TitleValue title=\"Description\">\n                {report.description || '-'}\n              </TitleValue>\n              <TitleValue title=\"Time\">\n                {format(new Date(report.time), 'PPp') || '-'}\n              </TitleValue>\n              <TitleValue title=\"Type\">{report.type}</TitleValue>\n            </div>\n          </PopupContent>\n        </Popup>\n      ) : null}\n      <Marker\n        anchor=\"bottom\"\n        key={report.id}\n        longitude={report.location?.longitude || 0}\n        latitude={report.location?.latitude || 0}\n        onClick={() => {\n          setShowPopup(true)\n        }}\n      >\n        <div className=\"cursor-pointer\">\n          {report.type === ReportType.Sighting ? (\n            <IconPinned />\n          ) : report.type === ReportType.Lead ? (\n            <IconBulb />\n          ) : (\n            <IconInfoSquare />\n          )}\n        </div>\n      </Marker>\n    </div>\n  )\n}\n"],"names":["IconEyeClosed","createReactComponent","IconEye","IconInfoSquare","IconPinnedFilled","IconPinned","CreateWitnessFormSchema","z","useFormCreateWitness","useForm","zodResolver","newReportFormSchema","ReportType","contactSchema","addNewCaseFormSchema","Status","Gender","useFormAddNewCase","FormProviderAddNewCase","children","methods","jsx","FormProvider","addNewReportsFormSchema","useFormAddNewReports","AddReports","register","errors","control","setValue","handleSubmit","reset","resetField","useFormContext","fields","append","remove","useFieldArray","formReports","useWatch","mapNewReport","useMap","createReportsMutation","loading","useCreateReportsMutation","uid","useAppSelector","selectUid","jsxs","Form","data","savedData","audio","description","lat","lng","time","type","address","images","namedOperations","notification$","field","index","Button","HtmlLabel","HtmlInput","AudioRecord","url","HtmlSelect","_b","_a","HtmlTextArea","DisplayLocation","_c","_d","makeId","IconPlus","updateCaseFormSchema","useFormUpdateCase","HomePage","bounds","setBounds","useState","router","useRouter","caseId","useMemo","handleMapChange","target","bounds2","Map","e","Panel","DefaultZoomControls","DisplayOneCase","DisplayAllMarkers","SidebarInfo","caseInfo","reports","user","selectUser","Accordion","MissingPersonInfo","ChangeCaseState","ReportsTimeline","ContactInfo","LinkButton","open","setOpen","update","useUpdateCaseStatusMutation","appName","selectApp","PlainButton","Dialog","status","result","map","useCaseQuery","useSetHeaderText","useSetHeaderPic","sortedReports","a","b","useEffect","location","useSetMapBoundsBasedOnReports","showtime","setShowtime","coordinates","useGetCoordinates","_e","rep","useKeypress","Switch","report","i","MarkerWithPopupCase","ManageUnapprovedReports","Loader","MarkerPopup","MapLines","unapprovedReportsData","unapprovedReportsFetching","useUnapprovedReportsQuery","officerDescription","setOfficerDescription","approveReportMutation","useCreateApprovedReportMutation","Fragment","id","MarkerWithOfficerApproval","KeyValue","format","usePreviousData","displayData","setDisplayData","useSearchCasesQuery","CurrentLocationButton","SearchPlaceBox","MarkerWithPopup","lastSeen","showPopup","setShowPopup","MarkerIcon","IconBulb","AnimatePresence","Popup","PopupContent","Marker","state","marker","Image","_f","_i","_h","_g","_k","_j","_l","onClose","IconX","AddNewCase","displayName","createCaseMutation","error","useCreateCaseMutation","uploading","uploadImages","useImageUpload","displayName2","dob","gender","height","images2","weight","contact","uploadedImages","uploadedReportImagesPromises","uploadedReportImages","description2","showPublic","c","AddCaseDetails","AddContacts","ShowMap","dispatch","useAppDispatch","setVictimName","setVictimPic","formData","FormGrid","ImageUploadPreview","Controller","setLocation","imageSrc","TitleValue","lngLat","SearchPlaceBoxContainer","locationInfo","fieldsContact","appendContactField","removeContactField","FormError","item","AccordionTitle","myMap","FormGridItem","setShowPublic","checked","NewReport","witness","useWitnessMeQuery","CreateNewReport","Container","CreateWitness","Link","createWitnessMutation","useCreateWitnessMutation","data2","getBounds","minLat","minLng","maxLat","maxLng","coordinate","watch","MarkerPopupDisplay"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}