{"version":3,"file":"Officer-0377115e.js","sources":["../../../forms/src/createOfficer.tsx","../../src/components/templates/Officer/Officer.tsx"],"sourcesContent":["import { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\n\nexport const CreateOfficerFormSchema = z.object({\n  name: z.string(),\n})\n\nexport type FormTypeCreateOfficer = z.infer<typeof CreateOfficerFormSchema>\n\nexport const useFormCreateOfficer = () =>\n  useForm<FormTypeCreateOfficer>({\n    resolver: zodResolver(CreateOfficerFormSchema),\n  })\n","import { memo, useState } from 'react'\n\nimport { Button } from '../../atoms/Button'\nimport { Form } from '../../atoms/Form'\nimport { HtmlInput } from '../../atoms/HtmlInput'\nimport { HtmlLabel } from '../../atoms/HtmlLabel'\nimport {\n  namedOperations,\n  useCreateOfficerMutation,\n  useUnapprovedReportsQuery,\n} from '@findus-org/network/src/generated'\nimport { useAppSelector } from '@findus-org/store'\nimport { useFormCreateOfficer } from '@findus-org/forms/src/createOfficer'\nimport { selectUid } from '@findus-org/store/user'\nimport { notification$ } from '@findus-org/util/subjects'\nimport { ShowData } from '../../organisms/ShowData'\nimport { useTakeSkip } from '@findus-org/util'\nimport { format } from 'date-fns'\n\nexport interface IOfficerProps {}\n\nexport const CreateOfficer = memo(() => {\n  const uid = useAppSelector(selectUid)\n  const [createOfficerMutation, { loading, data }] = useCreateOfficerMutation()\n\n  const { register, handleSubmit } = useFormCreateOfficer()\n  return (\n    <Form\n      onSubmit={handleSubmit(async (data) => {\n        if (!uid) {\n          notification$.next({ message: 'You are not logged in' })\n          return\n        }\n        await createOfficerMutation({\n          variables: {\n            createOfficerInput: { uid, name: data.name },\n          },\n          awaitRefetchQueries: true,\n          refetchQueries: [namedOperations.Query.officerMe],\n        })\n      })}\n    >\n      <HtmlLabel title=\"Name\">\n        <HtmlInput {...register('name')} />\n      </HtmlLabel>\n      <Button isLoading={loading} type=\"submit\">\n        Create officer\n      </Button>\n    </Form>\n  )\n})\n\nCreateOfficer.displayName = 'CreateOfficer'\n\nexport const Officer = () => {\n  const [caseId, setCaseId] = useState<number | null>(null)\n  const { setSkip, setTake, skip, take } = useTakeSkip()\n  const { data, loading } = useUnapprovedReportsQuery({\n    variables: {\n      where: {\n        // approvedReport: { is: null },\n        ...(caseId ? { caseId: { equals: caseId } } : null),\n      },\n    },\n  })\n  console.log('data', data)\n  return (\n    <div>\n      <HtmlLabel title=\"Case ID\">\n        <HtmlInput\n          value={caseId?.toString()}\n          onChange={(e) => setCaseId(+e.target.value)}\n        />\n      </HtmlLabel>\n      <ShowData\n        loading={loading}\n        pagination={{\n          setSkip,\n          setTake,\n          skip,\n          take,\n          resultCount: data?.reports.length,\n        }}\n      >\n        {data?.reports.map((report) => (\n          <div key={report.id}>\n            <div>{report.location?.latitude}</div>\n            <div>{report.type}</div>\n            <div>{report.caseId}</div>\n            <div>{report.description}</div>\n            <div>{format(new Date(report.time), 'PPp')}</div>\n          </div>\n        ))}\n      </ShowData>\n    </div>\n  )\n}\n"],"names":["CreateOfficerFormSchema","z","useFormCreateOfficer","useForm","zodResolver","CreateOfficer","memo","uid","useAppSelector","selectUid","createOfficerMutation","loading","data","useCreateOfficerMutation","register","handleSubmit","jsxs","Form","data2","notification$","namedOperations","jsx","HtmlLabel","HtmlInput","Button","Officer","caseId","setCaseId","useState","setSkip","setTake","skip","take","useTakeSkip","useUnapprovedReportsQuery","e","ShowData","report","_a","format"],"mappings":"+jBAIa,MAAAA,EAA0BC,EAAE,OAAO,CAC9C,KAAMA,EAAE,OAAO,CACjB,CAAC,EAIYC,EAAuB,IAClCC,EAA+B,CAC7B,SAAUC,EAAYJ,CAAuB,CAC/C,CAAC,uuBCQI,MAAAK,EAAAC,EAAA,KAAA,IAAA,CACL,MAAAC,EAAAC,EAAAC,CAAA,EACA,CAAAC,EAAA,CAAA,QAAAC,EAAA,KAAAC,CAAA,CAAA,EAAAC,IAEA,CAAA,SAAAC,EAAA,aAAAC,CAAA,EAAAb,EAAA,EACA,OAAAc,EAAA,KACEC,EAAC,CAAA,SAAAF,EAAA,MAAAG,GAAA,CAEG,GAAA,CAAAX,EAAA,CACEY,EAAA,KAAA,CAAA,QAAA,uBAAA,CAAA,EACA,MAAA,CAEF,MAAAT,EAAA,CAA4B,UAAA,CACf,mBAAA,CAAA,IAAAH,EAAA,KAAAW,EAAA,IAAA,CACkC,EAC7C,oBAAA,GACqB,eAAA,CAAAE,EAAA,MAAA,SAAA,CAC2B,CAAA,CACjD,CAAA,EACF,SAAA,CAEDC,EAAAA,IAAAC,EAAA,CAAA,MAAA,OAAA,SAAAD,EAAAA,IAAAE,EAAA,CAAA,GAAAT,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA,EAEAO,MAAAG,EAAA,CAAA,UAAAb,EAAA,KAAA,SAAA,SAAA,iBAAA,CAGA,CAAA,CAAA,CAGN,CAAA,EAEAN,EAAA,YAAA,gBAEO,MAAAoB,EAAA,IAAA,CACL,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,IAAA,EACA,CAAA,QAAAC,EAAA,QAAAC,EAAA,KAAAC,EAAA,KAAAC,CAAA,EAAAC,IACA,CAAA,KAAArB,EAAA,QAAAD,CAAA,EAAAuB,EAAA,CAAoD,UAAA,CACvC,MAAA,CACF,GAAAR,EAAA,CAAA,OAAA,CAAA,OAAAA,CAAA,CAAA,EAAA,IAEyC,CAChD,CACF,CAAA,EAEF,eAAA,IAAA,OAAAd,CAAA,EACAI,EAAA,KAAA,MAAA,CAAA,SAAA,CAEIK,EAAAA,IAAAC,EAAA,CAAA,MAAA,UAAA,SAAAD,EAAA,IACEE,EAAC,CAAA,MAAAG,GAAA,YAAAA,EAAA,WACyB,SAAAS,GAAAR,EAAA,CAAAQ,EAAA,OAAA,KAAA,CACkB,CAAA,EAAA,EAE9Cd,EAAA,IACAe,EAAC,CAAA,QAAAzB,EACC,WAAA,CACY,QAAAkB,EACV,QAAAC,EACA,KAAAC,EACA,KAAAC,EACA,YAAApB,GAAA,YAAAA,EAAA,QAAA,MAC2B,EAC7B,SAAAA,GAAA,YAAAA,EAAA,QAAA,IAAAyB,UAAArB,OAAAA,EAAA,KAAA,MAAA,CAAA,SAAA,CAIIK,EAAA,IAAA,MAAA,CAAA,UAAAiB,EAAAD,EAAA,WAAA,YAAAC,EAAA,SAAA,EAAgCjB,EAAAA,IAAA,MAAA,CAAA,SAAAgB,EAAA,IAAA,CAAA,EACdhB,EAAAA,IAAA,MAAA,CAAA,SAAAgB,EAAA,MAAA,CAAA,EACEhB,EAAAA,IAAA,MAAA,CAAA,SAAAgB,EAAA,WAAA,CAAA,EACKhB,EAAAA,IAAA,MAAA,CAAA,SAAAkB,EAAA,IAAA,KAAAF,EAAA,IAAA,EAAA,KAAA,EAAA,CACkB,GAAAA,EAAA,EAAA,GAE9C,CAAA,CACH,CAAA,CAAA,CAGN"}