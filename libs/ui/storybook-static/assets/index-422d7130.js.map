{"version":3,"file":"index-422d7130.js","sources":["../../../../node_modules/graphql-tag/lib/index.js","../../../../node_modules/@apollo/client/react/hooks/useApolloClient.js","../../../../node_modules/@apollo/client/react/hooks/useSyncExternalStore.js","../../../../node_modules/@apollo/client/react/parser/index.js","../../../../node_modules/@apollo/client/react/hooks/useQuery.js","../../../../node_modules/@apollo/client/react/hooks/useLazyQuery.js","../../../../node_modules/@apollo/client/react/hooks/useMutation.js","../../../network/src/generated/index.tsx"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport { useContext } from 'react';\nimport { getApolloContext } from \"../context/index.js\";\nexport function useApolloClient(override) {\n    var context = useContext(getApolloContext());\n    var client = override || context.client;\n    __DEV__ ? invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n        'instance in via options.') : invariant(!!client, 32);\n    return client;\n}\n//# sourceMappingURL=useApolloClient.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\nexport var useSyncExternalStore = realHook || (function (subscribe, getSnapshot, getServerSnapshot) {\n    var value = getSnapshot();\n    if (__DEV__ &&\n        !didWarnUncachedGetSnapshot &&\n        value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');\n    }\n    var _a = React.useState({ inst: { value: value, getSnapshot: getSnapshot } }), inst = _a[0].inst, forceUpdate = _a[1];\n    if (canUseLayoutEffect) {\n        React.useLayoutEffect(function () {\n            Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        }, [subscribe, value, getSnapshot]);\n    }\n    else {\n        Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n    }\n    React.useEffect(function () {\n        if (checkIfSnapshotChanged(inst)) {\n            forceUpdate({ inst: inst });\n        }\n        return subscribe(function handleStoreChange() {\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        });\n    }, [subscribe]);\n    return value;\n});\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    }\n    catch (_b) {\n        return true;\n    }\n}\n//# sourceMappingURL=useSyncExternalStore.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = 'Query';\n            break;\n        case DocumentType.Mutation:\n            name = 'Mutation';\n            break;\n        case DocumentType.Subscription:\n            name = 'Subscription';\n            break;\n    }\n    return name;\n}\nexport function parser(document) {\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") +\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\n        \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 33);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n        var x = _a[_i];\n        if (x.kind === 'FragmentDefinition') {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === 'OperationDefinition') {\n            switch (x.operation) {\n                case 'query':\n                    queries.push(x);\n                    break;\n                case 'mutation':\n                    mutations.push(x);\n                    break;\n                case 'subscription':\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    __DEV__ ? invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\n        \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), 34);\n    __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\n        \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") +\n        \"subscriptions and \".concat(mutations.length, \" mutations. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 35);\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length\n        ? queries\n        : mutations.length\n            ? mutations\n            : subscriptions;\n    __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") +\n        \"\".concat(definitions.length, \" definitions. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 36);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === 'Name') {\n        name = definition.name.value;\n    }\n    else {\n        name = 'data';\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\nexport function verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") +\n        \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 37);\n}\n//# sourceMappingURL=index.js.map","import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState, } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus, } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n    var stateRef = useRef();\n    if (!stateRef.current ||\n        client !== stateRef.current.client ||\n        query !== stateRef.current.query) {\n        stateRef.current = new InternalState(client, query, stateRef.current);\n    }\n    var state = stateRef.current;\n    var _a = useState(0), _tick = _a[0], setTick = _a[1];\n    state.forceUpdate = function () {\n        setTick(function (tick) { return tick + 1; });\n    };\n    return state;\n}\nvar InternalState = (function () {\n    function InternalState(client, query, previous) {\n        this.client = client;\n        this.query = query;\n        this.asyncResolveFns = new Set();\n        this.optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)();\n        this.ssrDisabledResult = maybeDeepFreeze({\n            loading: true,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.loading,\n        });\n        this.skipStandbyResult = maybeDeepFreeze({\n            loading: false,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.ready,\n        });\n        this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n        verifyDocumentType(query, DocumentType.Query);\n        var previousResult = previous && previous.result;\n        var previousData = previousResult && previousResult.data;\n        if (previousData) {\n            this.previousData = previousData;\n        }\n    }\n    InternalState.prototype.forceUpdate = function () {\n        __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n    };\n    InternalState.prototype.asyncUpdate = function (signal) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var watchQueryOptions = _this.watchQueryOptions;\n            var handleAborted = function () {\n                _this.asyncResolveFns.delete(resolve);\n                _this.optionsToIgnoreOnce.delete(watchQueryOptions);\n                signal.removeEventListener('abort', handleAborted);\n                reject(signal.reason);\n            };\n            _this.asyncResolveFns.add(resolve);\n            _this.optionsToIgnoreOnce.add(watchQueryOptions);\n            signal.addEventListener('abort', handleAborted);\n            _this.forceUpdate();\n        });\n    };\n    InternalState.prototype.useQuery = function (options) {\n        var _this = this;\n        this.renderPromises = useContext(getApolloContext()).renderPromises;\n        this.useOptions(options);\n        var obsQuery = this.useObservableQuery();\n        var result = useSyncExternalStore(useCallback(function () {\n            if (_this.renderPromises) {\n                return function () { };\n            }\n            var onNext = function () {\n                var previousResult = _this.result;\n                var result = obsQuery.getCurrentResult();\n                if (previousResult &&\n                    previousResult.loading === result.loading &&\n                    previousResult.networkStatus === result.networkStatus &&\n                    equal(previousResult.data, result.data)) {\n                    return;\n                }\n                _this.setResult(result);\n            };\n            var onError = function (error) {\n                var last = obsQuery[\"last\"];\n                subscription.unsubscribe();\n                try {\n                    obsQuery.resetLastResults();\n                    subscription = obsQuery.subscribe(onNext, onError);\n                }\n                finally {\n                    obsQuery[\"last\"] = last;\n                }\n                if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n                    throw error;\n                }\n                var previousResult = _this.result;\n                if (!previousResult ||\n                    (previousResult && previousResult.loading) ||\n                    !equal(error, previousResult.error)) {\n                    _this.setResult({\n                        data: (previousResult && previousResult.data),\n                        error: error,\n                        loading: false,\n                        networkStatus: NetworkStatus.error,\n                    });\n                }\n            };\n            var subscription = obsQuery.subscribe(onNext, onError);\n            return function () { return subscription.unsubscribe(); };\n        }, [\n            obsQuery,\n            this.renderPromises,\n            this.client.disableNetworkFetches,\n        ]), function () { return _this.getCurrentResult(); }, function () { return _this.getCurrentResult(); });\n        this.unsafeHandlePartialRefetch(result);\n        var queryResult = this.toQueryResult(result);\n        if (!queryResult.loading && this.asyncResolveFns.size) {\n            this.asyncResolveFns.forEach(function (resolve) { return resolve(queryResult); });\n            this.asyncResolveFns.clear();\n        }\n        return queryResult;\n    };\n    InternalState.prototype.useOptions = function (options) {\n        var _a;\n        var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        var currentWatchQueryOptions = this.watchQueryOptions;\n        if (this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n            !equal(watchQueryOptions, currentWatchQueryOptions)) {\n            this.watchQueryOptions = watchQueryOptions;\n            if (currentWatchQueryOptions && this.observable) {\n                this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n                this.observable.reobserve(this.getObsQueryOptions());\n                this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n                this.result = void 0;\n            }\n        }\n        this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n        this.onError = options.onError || InternalState.prototype.onError;\n        if ((this.renderPromises || this.client.disableNetworkFetches) &&\n            this.queryHookOptions.ssr === false &&\n            !this.queryHookOptions.skip) {\n            this.result = this.ssrDisabledResult;\n        }\n        else if (this.queryHookOptions.skip ||\n            this.watchQueryOptions.fetchPolicy === 'standby') {\n            this.result = this.skipStandbyResult;\n        }\n        else if (this.result === this.ssrDisabledResult ||\n            this.result === this.skipStandbyResult) {\n            this.result = void 0;\n        }\n    };\n    InternalState.prototype.getObsQueryOptions = function () {\n        var toMerge = [];\n        var globalDefaults = this.client.defaultOptions.watchQuery;\n        if (globalDefaults)\n            toMerge.push(globalDefaults);\n        if (this.queryHookOptions.defaultOptions) {\n            toMerge.push(this.queryHookOptions.defaultOptions);\n        }\n        toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n        return toMerge.reduce(mergeOptions);\n    };\n    InternalState.prototype.createWatchQueryOptions = function (_a) {\n        var _b;\n        if (_a === void 0) { _a = {}; }\n        var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n        var watchQueryOptions = Object.assign(otherOptions, { query: this.query });\n        if (this.renderPromises &&\n            (watchQueryOptions.fetchPolicy === 'network-only' ||\n                watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n            watchQueryOptions.fetchPolicy = 'cache-first';\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n            Object.assign(watchQueryOptions, {\n                initialFetchPolicy: initialFetchPolicy,\n                fetchPolicy: 'standby',\n            });\n        }\n        else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy =\n                ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) ||\n                    this.getDefaultFetchPolicy();\n        }\n        return watchQueryOptions;\n    };\n    InternalState.prototype.getDefaultFetchPolicy = function () {\n        var _a, _b;\n        return (((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) ||\n            \"cache-first\");\n    };\n    InternalState.prototype.onCompleted = function (data) { };\n    InternalState.prototype.onError = function (error) { };\n    InternalState.prototype.useObservableQuery = function () {\n        var obsQuery = this.observable =\n            this.renderPromises\n                && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n                || this.observable\n                || this.client.watchQuery(this.getObsQueryOptions());\n        this.obsQueryFields = useMemo(function () { return ({\n            refetch: obsQuery.refetch.bind(obsQuery),\n            reobserve: obsQuery.reobserve.bind(obsQuery),\n            fetchMore: obsQuery.fetchMore.bind(obsQuery),\n            updateQuery: obsQuery.updateQuery.bind(obsQuery),\n            startPolling: obsQuery.startPolling.bind(obsQuery),\n            stopPolling: obsQuery.stopPolling.bind(obsQuery),\n            subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n        }); }, [obsQuery]);\n        var ssrAllowed = !(this.queryHookOptions.ssr === false ||\n            this.queryHookOptions.skip);\n        if (this.renderPromises && ssrAllowed) {\n            this.renderPromises.registerSSRObservable(obsQuery);\n            if (obsQuery.getCurrentResult().loading) {\n                this.renderPromises.addObservableQueryPromise(obsQuery);\n            }\n        }\n        return obsQuery;\n    };\n    InternalState.prototype.setResult = function (nextResult) {\n        var previousResult = this.result;\n        if (previousResult && previousResult.data) {\n            this.previousData = previousResult.data;\n        }\n        this.result = nextResult;\n        this.forceUpdate();\n        this.handleErrorOrCompleted(nextResult);\n    };\n    InternalState.prototype.handleErrorOrCompleted = function (result) {\n        var _this = this;\n        if (!result.loading) {\n            var error_1 = this.toApolloError(result);\n            Promise.resolve().then(function () {\n                if (error_1) {\n                    _this.onError(error_1);\n                }\n                else if (result.data) {\n                    _this.onCompleted(result.data);\n                }\n            }).catch(function (error) {\n                __DEV__ && invariant.warn(error);\n            });\n        }\n    };\n    InternalState.prototype.toApolloError = function (result) {\n        return isNonEmptyArray(result.errors)\n            ? new ApolloError({ graphQLErrors: result.errors })\n            : result.error;\n    };\n    InternalState.prototype.getCurrentResult = function () {\n        if (!this.result) {\n            this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n        }\n        return this.result;\n    };\n    InternalState.prototype.toQueryResult = function (result) {\n        var queryResult = this.toQueryResultCache.get(result);\n        if (queryResult)\n            return queryResult;\n        var data = result.data, partial = result.partial, resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n        this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({ data: data }, resultWithoutPartial), this.obsQueryFields), { client: this.client, observable: this.observable, variables: this.observable.variables, called: !this.queryHookOptions.skip, previousData: this.previousData }));\n        if (!queryResult.error && isNonEmptyArray(result.errors)) {\n            queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n        }\n        return queryResult;\n    };\n    InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n        if (result.partial &&\n            this.queryHookOptions.partialRefetch &&\n            !result.loading &&\n            (!result.data || Object.keys(result.data).length === 0) &&\n            this.observable.options.fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n                loading: true,\n                networkStatus: NetworkStatus.refetch,\n            });\n            this.observable.refetch();\n        }\n    };\n    return InternalState;\n}());\n//# sourceMappingURL=useQuery.js.map","import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = [\n    'refetch',\n    'reobserve',\n    'fetchMore',\n    'updateQuery',\n    'startPolling',\n    'subscribeToMore',\n];\nexport function useLazyQuery(query, options) {\n    var _a;\n    var abortControllersRef = useRef(new Set());\n    var execOptionsRef = useRef();\n    var merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n    var internalState = useInternalState(useApolloClient(options && options.client), (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query);\n    var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), { skip: !execOptionsRef.current }));\n    var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy ||\n        internalState.getDefaultFetchPolicy();\n    var result = Object.assign(useQueryResult, {\n        called: !!execOptionsRef.current,\n    });\n    var eagerMethods = useMemo(function () {\n        var eagerMethods = {};\n        var _loop_1 = function (key) {\n            var method = result[key];\n            eagerMethods[key] = function () {\n                if (!execOptionsRef.current) {\n                    execOptionsRef.current = Object.create(null);\n                    internalState.forceUpdate();\n                }\n                return method.apply(this, arguments);\n            };\n        };\n        for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n            var key = EAGER_METHODS_1[_i];\n            _loop_1(key);\n        }\n        return eagerMethods;\n    }, []);\n    Object.assign(result, eagerMethods);\n    useEffect(function () {\n        return function () {\n            abortControllersRef.current.forEach(function (controller) {\n                controller.abort();\n            });\n        };\n    }, []);\n    var execute = useCallback(function (executeOptions) {\n        var controller = new AbortController();\n        abortControllersRef.current.add(controller);\n        execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), { fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy }) : {\n            fetchPolicy: initialFetchPolicy,\n        };\n        var promise = internalState\n            .asyncUpdate(controller.signal)\n            .then(function (queryResult) {\n            abortControllersRef.current.delete(controller);\n            return Object.assign(queryResult, eagerMethods);\n        });\n        promise.catch(function () {\n            abortControllersRef.current.delete(controller);\n        });\n        return promise;\n    }, []);\n    return [execute, result];\n}\n//# sourceMappingURL=useLazyQuery.js.map","import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { mergeOptions, } from \"../../core/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n    var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n    verifyDocumentType(mutation, DocumentType.Mutation);\n    var _a = useState({\n        called: false,\n        loading: false,\n        client: client,\n    }), result = _a[0], setResult = _a[1];\n    var ref = useRef({\n        result: result,\n        mutationId: 0,\n        isMounted: true,\n        client: client,\n        mutation: mutation,\n        options: options,\n    });\n    {\n        Object.assign(ref.current, { client: client, options: options, mutation: mutation });\n    }\n    var execute = useCallback(function (executeOptions) {\n        if (executeOptions === void 0) { executeOptions = {}; }\n        var _a = ref.current, options = _a.options, mutation = _a.mutation;\n        var baseOptions = __assign(__assign({}, options), { mutation: mutation });\n        var client = executeOptions.client || ref.current.client;\n        if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n            setResult(ref.current.result = {\n                loading: true,\n                error: void 0,\n                data: void 0,\n                called: true,\n                client: client,\n            });\n        }\n        var mutationId = ++ref.current.mutationId;\n        var clientOptions = mergeOptions(baseOptions, executeOptions);\n        return client.mutate(clientOptions).then(function (response) {\n            var _a;\n            var data = response.data, errors = response.errors;\n            var error = errors && errors.length > 0\n                ? new ApolloError({ graphQLErrors: errors })\n                : void 0;\n            if (mutationId === ref.current.mutationId &&\n                !clientOptions.ignoreResults) {\n                var result_1 = {\n                    called: true,\n                    loading: false,\n                    data: data,\n                    error: error,\n                    client: client,\n                };\n                if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n                    setResult(ref.current.result = result_1);\n                }\n            }\n            var onCompleted = executeOptions.onCompleted || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onCompleted);\n            onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n            return response;\n        }).catch(function (error) {\n            var _a;\n            if (mutationId === ref.current.mutationId &&\n                ref.current.isMounted) {\n                var result_2 = {\n                    loading: false,\n                    error: error,\n                    data: void 0,\n                    called: true,\n                    client: client,\n                };\n                if (!equal(ref.current.result, result_2)) {\n                    setResult(ref.current.result = result_2);\n                }\n            }\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (onError) {\n                onError(error, clientOptions);\n                return { data: void 0, errors: error };\n            }\n            throw error;\n        });\n    }, []);\n    var reset = useCallback(function () {\n        if (ref.current.isMounted) {\n            setResult({ called: false, loading: false, client: client });\n        }\n    }, []);\n    useEffect(function () {\n        ref.current.isMounted = true;\n        return function () {\n            ref.current.isMounted = false;\n        };\n    }, []);\n    return [execute, __assign({ reset: reset }, result)];\n}\n//# sourceMappingURL=useMutation.js.map","import { gql } from '@apollo/client'\nimport * as Apollo from '@apollo/client'\nexport type Maybe<T> = T | null\nexport type InputMaybe<T> = Maybe<T>\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K]\n}\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>\n}\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>\n}\nconst defaultOptions = {} as const\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string\n  String: string\n  Boolean: boolean\n  Int: number\n  Float: number\n  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */\n  DateTime: any\n}\n\nexport type ApprovedReport = {\n  __typename?: 'ApprovedReport'\n  createdAt: Scalars['DateTime']\n  description?: Maybe<Scalars['String']>\n  id: Scalars['Int']\n  officer?: Maybe<Officer>\n  officerId: Scalars['String']\n  report: Report\n  updatedAt: Scalars['DateTime']\n}\n\nexport type ApprovedReportListRelationFilter = {\n  every?: InputMaybe<ApprovedReportWhereInput>\n  none?: InputMaybe<ApprovedReportWhereInput>\n  some?: InputMaybe<ApprovedReportWhereInput>\n}\n\nexport type ApprovedReportOrderByRelationAggregateInput = {\n  _count?: InputMaybe<SortOrder>\n}\n\nexport type ApprovedReportOrderByWithRelationInput = {\n  createdAt?: InputMaybe<SortOrder>\n  description?: InputMaybe<SortOrder>\n  id?: InputMaybe<SortOrder>\n  officer?: InputMaybe<OfficerOrderByWithRelationInput>\n  officerId?: InputMaybe<SortOrder>\n  report?: InputMaybe<ReportOrderByWithRelationInput>\n  updatedAt?: InputMaybe<SortOrder>\n}\n\nexport type ApprovedReportRelationFilter = {\n  is?: InputMaybe<ApprovedReportWhereInput>\n  isNot?: InputMaybe<ApprovedReportWhereInput>\n}\n\nexport enum ApprovedReportScalarFieldEnum {\n  CreatedAt = 'createdAt',\n  Description = 'description',\n  Id = 'id',\n  OfficerId = 'officerId',\n  UpdatedAt = 'updatedAt',\n}\n\nexport type ApprovedReportWhereInput = {\n  AND?: InputMaybe<Array<ApprovedReportWhereInput>>\n  NOT?: InputMaybe<Array<ApprovedReportWhereInput>>\n  OR?: InputMaybe<Array<ApprovedReportWhereInput>>\n  createdAt?: InputMaybe<DateTimeFilter>\n  description?: InputMaybe<StringFilter>\n  id?: InputMaybe<IntFilter>\n  officer?: InputMaybe<OfficerWhereInput>\n  officerId?: InputMaybe<StringFilter>\n  report?: InputMaybe<ReportRelationFilter>\n  updatedAt?: InputMaybe<DateTimeFilter>\n}\n\nexport type ApprovedReportWhereUniqueInput = {\n  id?: InputMaybe<Scalars['Int']>\n}\n\n/** Enum for BodyType */\nexport enum BodyType {\n  Athletic = 'ATHLETIC',\n  Average = 'AVERAGE',\n  Heavy = 'HEAVY',\n  Obese = 'OBESE',\n  Slender = 'SLENDER',\n}\n\nexport type Case = {\n  __typename?: 'Case'\n  contact: Array<Scalars['String']>\n  createdAt: Scalars['DateTime']\n  id: Scalars['Int']\n  missingPerson: MissingPerson\n  missingPersonId: Scalars['Int']\n  reports: Array<Report>\n  status: Status\n  updatedAt: Scalars['DateTime']\n}\n\nexport type CaseOrderByWithRelationInput = {\n  contact?: InputMaybe<SortOrder>\n  createdAt?: InputMaybe<SortOrder>\n  id?: InputMaybe<SortOrder>\n  missingPerson?: InputMaybe<MissingPersonOrderByWithRelationInput>\n  missingPersonId?: InputMaybe<SortOrder>\n  reports?: InputMaybe<ReportOrderByRelationAggregateInput>\n  status?: InputMaybe<SortOrder>\n  updatedAt?: InputMaybe<SortOrder>\n}\n\nexport type CaseRelationFilter = {\n  is?: InputMaybe<CaseWhereInput>\n  isNot?: InputMaybe<CaseWhereInput>\n}\n\nexport enum CaseScalarFieldEnum {\n  Contact = 'contact',\n  CreatedAt = 'createdAt',\n  Id = 'id',\n  MissingPersonId = 'missingPersonId',\n  Status = 'status',\n  UpdatedAt = 'updatedAt',\n}\n\nexport type CaseWhereInput = {\n  AND?: InputMaybe<Array<CaseWhereInput>>\n  NOT?: InputMaybe<Array<CaseWhereInput>>\n  OR?: InputMaybe<Array<CaseWhereInput>>\n  contact?: InputMaybe<StringListFilter>\n  createdAt?: InputMaybe<DateTimeFilter>\n  id?: InputMaybe<IntFilter>\n  missingPerson?: InputMaybe<MissingPersonRelationFilter>\n  missingPersonId?: InputMaybe<IntFilter>\n  reports?: InputMaybe<ReportListRelationFilter>\n  status?: InputMaybe<EnumStatusFilter>\n  updatedAt?: InputMaybe<DateTimeFilter>\n}\n\nexport type CaseWhereUniqueInput = {\n  id?: InputMaybe<Scalars['Int']>\n}\n\nexport type Comment = {\n  __typename?: 'Comment'\n  content: Scalars['String']\n  createdAt: Scalars['DateTime']\n  id: Scalars['Int']\n  report?: Maybe<Report>\n  reportId: Scalars['Int']\n  updatedAt: Scalars['DateTime']\n  witness?: Maybe<Witness>\n  witnessUid: Scalars['String']\n}\n\nexport type CommentListRelationFilter = {\n  every?: InputMaybe<CommentWhereInput>\n  none?: InputMaybe<CommentWhereInput>\n  some?: InputMaybe<CommentWhereInput>\n}\n\nexport type CommentOrderByRelationAggregateInput = {\n  _count?: InputMaybe<SortOrder>\n}\n\nexport type CommentOrderByWithRelationInput = {\n  Report?: InputMaybe<ReportOrderByWithRelationInput>\n  Witness?: InputMaybe<WitnessOrderByWithRelationInput>\n  content?: InputMaybe<SortOrder>\n  createdAt?: InputMaybe<SortOrder>\n  id?: InputMaybe<SortOrder>\n  reportId?: InputMaybe<SortOrder>\n  updatedAt?: InputMaybe<SortOrder>\n  witnessUid?: InputMaybe<SortOrder>\n}\n\nexport enum CommentScalarFieldEnum {\n  Content = 'content',\n  CreatedAt = 'createdAt',\n  Id = 'id',\n  ReportId = 'reportId',\n  UpdatedAt = 'updatedAt',\n  WitnessUid = 'witnessUid',\n}\n\nexport type CommentWhereInput = {\n  AND?: InputMaybe<Array<CommentWhereInput>>\n  NOT?: InputMaybe<Array<CommentWhereInput>>\n  OR?: InputMaybe<Array<CommentWhereInput>>\n  Report?: InputMaybe<ReportWhereInput>\n  Witness?: InputMaybe<WitnessWhereInput>\n  content?: InputMaybe<StringFilter>\n  createdAt?: InputMaybe<DateTimeFilter>\n  id?: InputMaybe<IntFilter>\n  reportId?: InputMaybe<IntFilter>\n  updatedAt?: InputMaybe<DateTimeFilter>\n  witnessUid?: InputMaybe<StringFilter>\n}\n\nexport type CommentWhereUniqueInput = {\n  id?: InputMaybe<Scalars['Int']>\n}\n\nexport type CreateApprovedReportInput = {\n  description?: InputMaybe<Scalars['String']>\n  id: Scalars['Int']\n}\n\nexport type CreateCaseInput = {\n  contact: Array<Scalars['String']>\n  missingPerson: CreateMissingPersonInput\n  reports: Array<CreateReportInputWithoutCaseId>\n  status: Status\n}\n\nexport type CreateCommentInput = {\n  content: Scalars['String']\n  reportId: Scalars['Int']\n}\n\nexport type CreateLocationInput = {\n  address: Scalars['String']\n  latitude: Scalars['Float']\n  longitude: Scalars['Float']\n}\n\nexport type CreateMissingPersonInput = {\n  bodyType?: InputMaybe<BodyType>\n  description: Scalars['String']\n  displayName: Scalars['String']\n  dob?: InputMaybe<Scalars['DateTime']>\n  gender: Gender\n  height?: InputMaybe<Scalars['Int']>\n  images: Array<Scalars['String']>\n  missingSince?: InputMaybe<Scalars['DateTime']>\n  weight?: InputMaybe<Scalars['Int']>\n}\n\nexport type CreateOfficerInput = {\n  name?: InputMaybe<Scalars['String']>\n  uid: Scalars['String']\n}\n\nexport type CreateReportInput = {\n  audio?: InputMaybe<Scalars['String']>\n  caseId?: InputMaybe<Scalars['Int']>\n  description: Scalars['String']\n  images: Array<Scalars['String']>\n  locationId?: InputMaybe<Scalars['Int']>\n  time?: InputMaybe<Scalars['DateTime']>\n  type: ReportType\n  witnessId?: InputMaybe<Scalars['String']>\n}\n\nexport type CreateReportInputWithoutCaseId = {\n  audio?: InputMaybe<Scalars['String']>\n  description: Scalars['String']\n  images: Array<Scalars['String']>\n  location: CreateLocationInput\n  locationId?: InputMaybe<Scalars['Int']>\n  officerDescription?: InputMaybe<Scalars['String']>\n  showPublic?: InputMaybe<Scalars['Boolean']>\n  time?: InputMaybe<Scalars['DateTime']>\n  type: ReportType\n  witnessId?: InputMaybe<Scalars['String']>\n}\n\nexport type CreateWitnessInput = {\n  name?: InputMaybe<Scalars['String']>\n  uid: Scalars['String']\n}\n\nexport type DateFilterInput = {\n  end: Scalars['String']\n  start: Scalars['String']\n}\n\nexport type DateTimeFilter = {\n  equals?: InputMaybe<Scalars['String']>\n  gt?: InputMaybe<Scalars['String']>\n  gte?: InputMaybe<Scalars['String']>\n  in?: InputMaybe<Array<Scalars['String']>>\n  lt?: InputMaybe<Scalars['String']>\n  lte?: InputMaybe<Scalars['String']>\n  notIn?: InputMaybe<Array<Scalars['String']>>\n}\n\nexport type EnumBodyTypeFilter = {\n  equals?: InputMaybe<BodyType>\n  in?: InputMaybe<Array<BodyType>>\n  not?: InputMaybe<BodyType>\n  notIn?: InputMaybe<Array<BodyType>>\n}\n\nexport type EnumGenderFilter = {\n  equals?: InputMaybe<Gender>\n  in?: InputMaybe<Array<Gender>>\n  not?: InputMaybe<Gender>\n  notIn?: InputMaybe<Array<Gender>>\n}\n\nexport type EnumReportTypeFilter = {\n  equals?: InputMaybe<ReportType>\n  in?: InputMaybe<Array<ReportType>>\n  not?: InputMaybe<ReportType>\n  notIn?: InputMaybe<Array<ReportType>>\n}\n\nexport type EnumStatusFilter = {\n  equals?: InputMaybe<Status>\n  in?: InputMaybe<Array<Status>>\n  not?: InputMaybe<Status>\n  notIn?: InputMaybe<Array<Status>>\n}\n\nexport type FloatFilter = {\n  equals?: InputMaybe<Scalars['Float']>\n  gt?: InputMaybe<Scalars['Float']>\n  gte?: InputMaybe<Scalars['Float']>\n  lt?: InputMaybe<Scalars['Float']>\n  lte?: InputMaybe<Scalars['Float']>\n  not?: InputMaybe<Scalars['Float']>\n}\n\n/** Enum for Gender */\nexport enum Gender {\n  Female = 'FEMALE',\n  Male = 'MALE',\n  NonBinary = 'NON_BINARY',\n  PreferNotToSay = 'PREFER_NOT_TO_SAY',\n}\n\nexport type IntFilter = {\n  equals?: InputMaybe<Scalars['Int']>\n  gt?: InputMaybe<Scalars['Int']>\n  gte?: InputMaybe<Scalars['Int']>\n  lt?: InputMaybe<Scalars['Int']>\n  lte?: InputMaybe<Scalars['Int']>\n}\n\nexport type Location = {\n  __typename?: 'Location'\n  address: Scalars['String']\n  createdAt: Scalars['DateTime']\n  id: Scalars['Int']\n  latitude: Scalars['Float']\n  longitude: Scalars['Float']\n  reports: Array<Report>\n  updatedAt: Scalars['DateTime']\n}\n\nexport type LocationFilterInput = {\n  nw_lat: Scalars['Float']\n  nw_lng: Scalars['Float']\n  se_lat: Scalars['Float']\n  se_lng: Scalars['Float']\n}\n\nexport type LocationOrderByWithRelationInput = {\n  address?: InputMaybe<SortOrder>\n  createdAt?: InputMaybe<SortOrder>\n  id?: InputMaybe<SortOrder>\n  latitude?: InputMaybe<SortOrder>\n  longitude?: InputMaybe<SortOrder>\n  reports?: InputMaybe<ReportOrderByRelationAggregateInput>\n  updatedAt?: InputMaybe<SortOrder>\n}\n\nexport type LocationRelationFilter = {\n  is?: InputMaybe<LocationWhereInput>\n  isNot?: InputMaybe<LocationWhereInput>\n}\n\nexport enum LocationScalarFieldEnum {\n  Address = 'address',\n  CreatedAt = 'createdAt',\n  Id = 'id',\n  Latitude = 'latitude',\n  Longitude = 'longitude',\n  UpdatedAt = 'updatedAt',\n}\n\nexport type LocationWhereInput = {\n  AND?: InputMaybe<Array<LocationWhereInput>>\n  NOT?: InputMaybe<Array<LocationWhereInput>>\n  OR?: InputMaybe<Array<LocationWhereInput>>\n  address?: InputMaybe<StringFilter>\n  createdAt?: InputMaybe<DateTimeFilter>\n  id?: InputMaybe<IntFilter>\n  latitude?: InputMaybe<FloatFilter>\n  longitude?: InputMaybe<FloatFilter>\n  reports?: InputMaybe<ReportListRelationFilter>\n  updatedAt?: InputMaybe<DateTimeFilter>\n}\n\nexport type LocationWhereUniqueInput = {\n  id?: InputMaybe<Scalars['Int']>\n}\n\nexport type LoginInput = {\n  email: Scalars['String']\n  password: Scalars['String']\n}\n\nexport type LoginOutput = {\n  __typename?: 'LoginOutput'\n  displayName: Scalars['String']\n  email: Scalars['String']\n  expiresIn: Scalars['String']\n  idToken: Scalars['String']\n  kind: Scalars['String']\n  localId: Scalars['String']\n  refreshToken: Scalars['String']\n}\n\nexport type MissingPerson = {\n  __typename?: 'MissingPerson'\n  bodyType?: Maybe<BodyType>\n  case?: Maybe<Case>\n  createdAt: Scalars['DateTime']\n  description: Scalars['String']\n  displayName: Scalars['String']\n  dob?: Maybe<Scalars['DateTime']>\n  gender: Gender\n  height?: Maybe<Scalars['Int']>\n  id: Scalars['Int']\n  images: Array<Scalars['String']>\n  missingSince?: Maybe<Scalars['DateTime']>\n  updatedAt: Scalars['DateTime']\n  weight?: Maybe<Scalars['Int']>\n}\n\nexport type MissingPersonOrderByWithRelationInput = {\n  bodyType?: InputMaybe<SortOrder>\n  case?: InputMaybe<CaseOrderByWithRelationInput>\n  createdAt?: InputMaybe<SortOrder>\n  description?: InputMaybe<SortOrder>\n  displayName?: InputMaybe<SortOrder>\n  dob?: InputMaybe<SortOrder>\n  gender?: InputMaybe<SortOrder>\n  height?: InputMaybe<SortOrder>\n  id?: InputMaybe<SortOrder>\n  images?: InputMaybe<SortOrder>\n  missingSince?: InputMaybe<SortOrder>\n  updatedAt?: InputMaybe<SortOrder>\n  weight?: InputMaybe<SortOrder>\n}\n\nexport type MissingPersonRelationFilter = {\n  is?: InputMaybe<MissingPersonWhereInput>\n  isNot?: InputMaybe<MissingPersonWhereInput>\n}\n\nexport enum MissingPersonScalarFieldEnum {\n  BodyType = 'bodyType',\n  CreatedAt = 'createdAt',\n  Description = 'description',\n  DisplayName = 'displayName',\n  Dob = 'dob',\n  Gender = 'gender',\n  Height = 'height',\n  Id = 'id',\n  Images = 'images',\n  MissingSince = 'missingSince',\n  UpdatedAt = 'updatedAt',\n  Weight = 'weight',\n}\n\nexport type MissingPersonWhereInput = {\n  AND?: InputMaybe<Array<MissingPersonWhereInput>>\n  NOT?: InputMaybe<Array<MissingPersonWhereInput>>\n  OR?: InputMaybe<Array<MissingPersonWhereInput>>\n  bodyType?: InputMaybe<EnumBodyTypeFilter>\n  case?: InputMaybe<CaseRelationFilter>\n  createdAt?: InputMaybe<DateTimeFilter>\n  description?: InputMaybe<StringFilter>\n  displayName?: InputMaybe<StringFilter>\n  dob?: InputMaybe<DateTimeFilter>\n  gender?: InputMaybe<EnumGenderFilter>\n  height?: InputMaybe<FloatFilter>\n  id?: InputMaybe<IntFilter>\n  images?: InputMaybe<StringListFilter>\n  missingSince?: InputMaybe<DateTimeFilter>\n  updatedAt?: InputMaybe<DateTimeFilter>\n  weight?: InputMaybe<FloatFilter>\n}\n\nexport type MissingPersonWhereUniqueInput = {\n  id?: InputMaybe<Scalars['Int']>\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation'\n  createApprovedReport: ApprovedReport\n  createCase: Case\n  createComment: Comment\n  createLocation: Location\n  createMissingPerson: MissingPerson\n  createOfficer: Officer\n  createReport: Report\n  createReports: Case\n  createWitness: Witness\n  login: LoginOutput\n  logout: Scalars['Boolean']\n  refreshToken: RefreshTokenOutput\n  register: RegisterOutput\n  removeApprovedReport: ApprovedReport\n  removeCase: Case\n  removeLocation: Location\n  removeMissingPerson: MissingPerson\n  removeOfficer: Officer\n  removeReport: Report\n  removeWitness: Witness\n  setAdmin: Scalars['Boolean']\n  setRole: Scalars['Boolean']\n  updateApprovedReport: ApprovedReport\n  updateCaseStatus: Case\n  updateLocation: Location\n  updateMissingPerson: MissingPerson\n  updateOfficer: Officer\n  updateReport: Report\n  updateWitness: Witness\n}\n\nexport type MutationCreateApprovedReportArgs = {\n  createApprovedReportInput: CreateApprovedReportInput\n}\n\nexport type MutationCreateCaseArgs = {\n  createCaseInput: CreateCaseInput\n}\n\nexport type MutationCreateCommentArgs = {\n  createCommentInput: CreateCommentInput\n}\n\nexport type MutationCreateLocationArgs = {\n  createLocationInput: CreateLocationInput\n}\n\nexport type MutationCreateMissingPersonArgs = {\n  createMissingPersonInput: CreateMissingPersonInput\n}\n\nexport type MutationCreateOfficerArgs = {\n  createOfficerInput: CreateOfficerInput\n}\n\nexport type MutationCreateReportArgs = {\n  createReportInput: CreateReportInput\n}\n\nexport type MutationCreateReportsArgs = {\n  caseId: Scalars['Int']\n  createReportsInput: Array<CreateReportInputWithoutCaseId>\n}\n\nexport type MutationCreateWitnessArgs = {\n  createWitnessInput: CreateWitnessInput\n}\n\nexport type MutationLoginArgs = {\n  credentials: LoginInput\n}\n\nexport type MutationRefreshTokenArgs = {\n  refreshTokenInput: RefreshTokenInput\n}\n\nexport type MutationRegisterArgs = {\n  credentials: RegisterInput\n}\n\nexport type MutationRemoveApprovedReportArgs = {\n  where?: InputMaybe<ApprovedReportWhereUniqueInput>\n}\n\nexport type MutationRemoveCaseArgs = {\n  where?: InputMaybe<CaseWhereUniqueInput>\n}\n\nexport type MutationRemoveLocationArgs = {\n  where?: InputMaybe<LocationWhereUniqueInput>\n}\n\nexport type MutationRemoveMissingPersonArgs = {\n  where?: InputMaybe<MissingPersonWhereUniqueInput>\n}\n\nexport type MutationRemoveOfficerArgs = {\n  where?: InputMaybe<OfficerWhereUniqueInput>\n}\n\nexport type MutationRemoveReportArgs = {\n  where?: InputMaybe<ReportWhereUniqueInput>\n}\n\nexport type MutationRemoveWitnessArgs = {\n  where?: InputMaybe<WitnessWhereUniqueInput>\n}\n\nexport type MutationSetAdminArgs = {\n  uid: Scalars['String']\n}\n\nexport type MutationSetRoleArgs = {\n  setRoleInput: SetRoleInput\n}\n\nexport type MutationUpdateApprovedReportArgs = {\n  updateApprovedReportInput: UpdateApprovedReportInput\n}\n\nexport type MutationUpdateCaseStatusArgs = {\n  updateCaseInput: UpdateCaseInput\n}\n\nexport type MutationUpdateLocationArgs = {\n  updateLocationInput: UpdateLocationInput\n}\n\nexport type MutationUpdateMissingPersonArgs = {\n  updateMissingPersonInput: UpdateMissingPersonInput\n}\n\nexport type MutationUpdateOfficerArgs = {\n  updateOfficerInput: UpdateOfficerInput\n}\n\nexport type MutationUpdateReportArgs = {\n  updateReportInput: UpdateReportInput\n}\n\nexport type MutationUpdateWitnessArgs = {\n  updateWitnessInput: UpdateWitnessInput\n}\n\nexport type Officer = {\n  __typename?: 'Officer'\n  approvedReports: Array<ApprovedReport>\n  createdAt: Scalars['DateTime']\n  name?: Maybe<Scalars['String']>\n  uid: Scalars['String']\n  updatedAt: Scalars['DateTime']\n}\n\nexport type OfficerOrderByWithRelationInput = {\n  approvedReports?: InputMaybe<ApprovedReportOrderByRelationAggregateInput>\n  createdAt?: InputMaybe<SortOrder>\n  name?: InputMaybe<SortOrder>\n  uid?: InputMaybe<SortOrder>\n  updatedAt?: InputMaybe<SortOrder>\n}\n\nexport enum OfficerScalarFieldEnum {\n  CreatedAt = 'createdAt',\n  Name = 'name',\n  Uid = 'uid',\n  UpdatedAt = 'updatedAt',\n}\n\nexport type OfficerWhereInput = {\n  AND?: InputMaybe<Array<OfficerWhereInput>>\n  NOT?: InputMaybe<Array<OfficerWhereInput>>\n  OR?: InputMaybe<Array<OfficerWhereInput>>\n  approvedReports?: InputMaybe<ApprovedReportListRelationFilter>\n  createdAt?: InputMaybe<DateTimeFilter>\n  name?: InputMaybe<StringFilter>\n  uid?: InputMaybe<StringFilter>\n  updatedAt?: InputMaybe<DateTimeFilter>\n}\n\nexport type OfficerWhereUniqueInput = {\n  uid?: InputMaybe<Scalars['String']>\n}\n\nexport type Query = {\n  __typename?: 'Query'\n  approvedReport: ApprovedReport\n  approvedReports: Array<ApprovedReport>\n  case: Case\n  cases: Array<Case>\n  comment: Comment\n  comments: Array<Comment>\n  location: Location\n  locations: Array<Location>\n  missingPeople: Array<MissingPerson>\n  missingPerson: MissingPerson\n  officer: Officer\n  officerMe?: Maybe<Officer>\n  officers: Array<Officer>\n  report: Report\n  reports: Array<Report>\n  searchCases: Array<Report>\n  witness: Witness\n  witnessMe?: Maybe<Witness>\n  witnesses: Array<Witness>\n}\n\nexport type QueryApprovedReportArgs = {\n  where?: InputMaybe<ApprovedReportWhereUniqueInput>\n}\n\nexport type QueryApprovedReportsArgs = {\n  cursor?: InputMaybe<ApprovedReportWhereUniqueInput>\n  distinct?: InputMaybe<Array<ApprovedReportScalarFieldEnum>>\n  orderBy?: InputMaybe<Array<ApprovedReportOrderByWithRelationInput>>\n  skip?: InputMaybe<Scalars['Int']>\n  take?: InputMaybe<Scalars['Int']>\n  where?: InputMaybe<ApprovedReportWhereInput>\n}\n\nexport type QueryCaseArgs = {\n  where?: InputMaybe<CaseWhereUniqueInput>\n}\n\nexport type QueryCasesArgs = {\n  cursor?: InputMaybe<CaseWhereUniqueInput>\n  distinct?: InputMaybe<Array<CaseScalarFieldEnum>>\n  orderBy?: InputMaybe<Array<CaseOrderByWithRelationInput>>\n  skip?: InputMaybe<Scalars['Int']>\n  take?: InputMaybe<Scalars['Int']>\n  where?: InputMaybe<CaseWhereInput>\n}\n\nexport type QueryCommentArgs = {\n  where?: InputMaybe<CommentWhereUniqueInput>\n}\n\nexport type QueryCommentsArgs = {\n  cursor?: InputMaybe<CommentWhereUniqueInput>\n  distinct?: InputMaybe<Array<CommentScalarFieldEnum>>\n  orderBy?: InputMaybe<Array<CommentOrderByWithRelationInput>>\n  skip?: InputMaybe<Scalars['Int']>\n  take?: InputMaybe<Scalars['Int']>\n  where?: InputMaybe<CommentWhereInput>\n}\n\nexport type QueryLocationArgs = {\n  where?: InputMaybe<LocationWhereUniqueInput>\n}\n\nexport type QueryLocationsArgs = {\n  cursor?: InputMaybe<LocationWhereUniqueInput>\n  distinct?: InputMaybe<Array<LocationScalarFieldEnum>>\n  orderBy?: InputMaybe<Array<LocationOrderByWithRelationInput>>\n  skip?: InputMaybe<Scalars['Int']>\n  take?: InputMaybe<Scalars['Int']>\n  where?: InputMaybe<LocationWhereInput>\n}\n\nexport type QueryMissingPeopleArgs = {\n  cursor?: InputMaybe<MissingPersonWhereUniqueInput>\n  distinct?: InputMaybe<Array<MissingPersonScalarFieldEnum>>\n  orderBy?: InputMaybe<Array<MissingPersonOrderByWithRelationInput>>\n  skip?: InputMaybe<Scalars['Int']>\n  take?: InputMaybe<Scalars['Int']>\n  where?: InputMaybe<MissingPersonWhereInput>\n}\n\nexport type QueryMissingPersonArgs = {\n  where?: InputMaybe<MissingPersonWhereUniqueInput>\n}\n\nexport type QueryOfficerArgs = {\n  where?: InputMaybe<OfficerWhereUniqueInput>\n}\n\nexport type QueryOfficerMeArgs = {\n  where?: InputMaybe<OfficerWhereUniqueInput>\n}\n\nexport type QueryOfficersArgs = {\n  cursor?: InputMaybe<OfficerWhereUniqueInput>\n  distinct?: InputMaybe<Array<OfficerScalarFieldEnum>>\n  orderBy?: InputMaybe<Array<OfficerOrderByWithRelationInput>>\n  skip?: InputMaybe<Scalars['Int']>\n  take?: InputMaybe<Scalars['Int']>\n  where?: InputMaybe<OfficerWhereInput>\n}\n\nexport type QueryReportArgs = {\n  where?: InputMaybe<ReportWhereUniqueInput>\n}\n\nexport type QueryReportsArgs = {\n  cursor?: InputMaybe<ReportWhereUniqueInput>\n  distinct?: InputMaybe<Array<ReportScalarFieldEnum>>\n  orderBy?: InputMaybe<Array<ReportOrderByWithRelationInput>>\n  skip?: InputMaybe<Scalars['Int']>\n  take?: InputMaybe<Scalars['Int']>\n  where?: InputMaybe<ReportWhereInput>\n}\n\nexport type QuerySearchCasesArgs = {\n  dateFilter?: InputMaybe<DateFilterInput>\n  locationFilter: LocationFilterInput\n}\n\nexport type QueryWitnessArgs = {\n  where?: InputMaybe<WitnessWhereUniqueInput>\n}\n\nexport type QueryWitnessMeArgs = {\n  where?: InputMaybe<WitnessWhereUniqueInput>\n}\n\nexport type QueryWitnessesArgs = {\n  cursor?: InputMaybe<WitnessWhereUniqueInput>\n  distinct?: InputMaybe<Array<WitnessScalarFieldEnum>>\n  orderBy?: InputMaybe<Array<WitnessOrderByWithRelationInput>>\n  skip?: InputMaybe<Scalars['Int']>\n  take?: InputMaybe<Scalars['Int']>\n  where?: InputMaybe<WitnessWhereInput>\n}\n\nexport enum QueryMode {\n  Default = 'default',\n  Insensitive = 'insensitive',\n}\n\nexport type RefreshTokenInput = {\n  refresh_token: Scalars['String']\n}\n\nexport type RefreshTokenOutput = {\n  __typename?: 'RefreshTokenOutput'\n  access_token: Scalars['String']\n  expires_in: Scalars['String']\n  id_token: Scalars['String']\n  project_id: Scalars['String']\n  refresh_token: Scalars['String']\n  token_type: Scalars['String']\n  user_id: Scalars['String']\n}\n\nexport type RegisterInput = {\n  displayName?: InputMaybe<Scalars['String']>\n  email: Scalars['String']\n  password: Scalars['String']\n}\n\nexport type RegisterOutput = {\n  __typename?: 'RegisterOutput'\n  displayName: Scalars['String']\n  email: Scalars['String']\n  expiresIn: Scalars['String']\n  idToken: Scalars['String']\n  kind: Scalars['String']\n  localId: Scalars['String']\n  refreshToken: Scalars['String']\n}\n\nexport type Report = {\n  __typename?: 'Report'\n  approvedReport?: Maybe<ApprovedReport>\n  audio?: Maybe<Scalars['String']>\n  case?: Maybe<Case>\n  caseId?: Maybe<Scalars['Int']>\n  comments?: Maybe<Array<Comment>>\n  createdAt: Scalars['DateTime']\n  description: Scalars['String']\n  id: Scalars['Int']\n  images: Array<Scalars['String']>\n  location?: Maybe<Location>\n  locationId?: Maybe<Scalars['Int']>\n  time?: Maybe<Scalars['DateTime']>\n  type: ReportType\n  updatedAt: Scalars['DateTime']\n  witness?: Maybe<Witness>\n  witnessId?: Maybe<Scalars['String']>\n}\n\nexport type ReportListRelationFilter = {\n  every?: InputMaybe<ReportWhereInput>\n  none?: InputMaybe<ReportWhereInput>\n  some?: InputMaybe<ReportWhereInput>\n}\n\nexport type ReportOrderByRelationAggregateInput = {\n  _count?: InputMaybe<SortOrder>\n}\n\nexport type ReportOrderByWithRelationInput = {\n  approvedReport?: InputMaybe<ApprovedReportOrderByWithRelationInput>\n  audio?: InputMaybe<SortOrder>\n  case?: InputMaybe<CaseOrderByWithRelationInput>\n  caseId?: InputMaybe<SortOrder>\n  comments?: InputMaybe<CommentOrderByRelationAggregateInput>\n  createdAt?: InputMaybe<SortOrder>\n  description?: InputMaybe<SortOrder>\n  id?: InputMaybe<SortOrder>\n  images?: InputMaybe<SortOrder>\n  location?: InputMaybe<LocationOrderByWithRelationInput>\n  locationId?: InputMaybe<SortOrder>\n  time?: InputMaybe<SortOrder>\n  type?: InputMaybe<SortOrder>\n  updatedAt?: InputMaybe<SortOrder>\n  witness?: InputMaybe<WitnessOrderByWithRelationInput>\n  witnessId?: InputMaybe<SortOrder>\n}\n\nexport type ReportRelationFilter = {\n  is?: InputMaybe<ReportWhereInput>\n  isNot?: InputMaybe<ReportWhereInput>\n}\n\nexport enum ReportScalarFieldEnum {\n  Audio = 'audio',\n  CaseId = 'caseId',\n  CreatedAt = 'createdAt',\n  Description = 'description',\n  Id = 'id',\n  Images = 'images',\n  LocationId = 'locationId',\n  Time = 'time',\n  Type = 'type',\n  UpdatedAt = 'updatedAt',\n  WitnessId = 'witnessId',\n}\n\n/** Enum for ReportType */\nexport enum ReportType {\n  GeneralInformation = 'GENERAL_INFORMATION',\n  Lead = 'LEAD',\n  Sighting = 'SIGHTING',\n}\n\nexport type ReportWhereInput = {\n  AND?: InputMaybe<Array<ReportWhereInput>>\n  NOT?: InputMaybe<Array<ReportWhereInput>>\n  OR?: InputMaybe<Array<ReportWhereInput>>\n  approvedReport?: InputMaybe<ApprovedReportRelationFilter>\n  audio?: InputMaybe<StringFilter>\n  case?: InputMaybe<CaseRelationFilter>\n  caseId?: InputMaybe<IntFilter>\n  comments?: InputMaybe<CommentListRelationFilter>\n  createdAt?: InputMaybe<DateTimeFilter>\n  description?: InputMaybe<StringFilter>\n  id?: InputMaybe<IntFilter>\n  images?: InputMaybe<StringListFilter>\n  location?: InputMaybe<LocationRelationFilter>\n  locationId?: InputMaybe<IntFilter>\n  time?: InputMaybe<DateTimeFilter>\n  type?: InputMaybe<EnumReportTypeFilter>\n  updatedAt?: InputMaybe<DateTimeFilter>\n  witness?: InputMaybe<WitnessRelationFilter>\n  witnessId?: InputMaybe<StringFilter>\n}\n\nexport type ReportWhereUniqueInput = {\n  id?: InputMaybe<Scalars['Int']>\n}\n\n/** Enum for roles */\nexport enum RoleEnum {\n  Admin = 'admin',\n  Manager = 'manager',\n}\n\nexport type SetRoleInput = {\n  role: RoleEnum\n  uid: Scalars['String']\n}\n\nexport enum SortOrder {\n  Asc = 'asc',\n  Desc = 'desc',\n}\n\n/** Enum for Status */\nexport enum Status {\n  FoundDeceased = 'FOUND_DECEASED',\n  FoundSafe = 'FOUND_SAFE',\n  Missing = 'MISSING',\n}\n\nexport type StringFilter = {\n  contains?: InputMaybe<Scalars['String']>\n  endsWith?: InputMaybe<Scalars['String']>\n  equals?: InputMaybe<Scalars['String']>\n  gt?: InputMaybe<Scalars['String']>\n  gte?: InputMaybe<Scalars['String']>\n  in?: InputMaybe<Array<Scalars['String']>>\n  lt?: InputMaybe<Scalars['String']>\n  lte?: InputMaybe<Scalars['String']>\n  mode?: InputMaybe<QueryMode>\n  not?: InputMaybe<Scalars['String']>\n  notIn?: InputMaybe<Array<Scalars['String']>>\n  startsWith?: InputMaybe<Scalars['String']>\n}\n\nexport type StringListFilter = {\n  equals?: InputMaybe<Array<Scalars['String']>>\n  has?: InputMaybe<Scalars['String']>\n  hasEvery?: InputMaybe<Array<Scalars['String']>>\n  hasSome?: InputMaybe<Array<Scalars['String']>>\n  isEmpty?: InputMaybe<Scalars['Boolean']>\n}\n\nexport type UpdateApprovedReportInput = {\n  description?: InputMaybe<Scalars['String']>\n  id: Scalars['Int']\n}\n\nexport type UpdateCaseInput = {\n  id: Scalars['Int']\n  status: Status\n}\n\nexport type UpdateLocationInput = {\n  address?: InputMaybe<Scalars['String']>\n  id: Scalars['Int']\n  latitude?: InputMaybe<Scalars['Float']>\n  longitude?: InputMaybe<Scalars['Float']>\n}\n\nexport type UpdateMissingPersonInput = {\n  bodyType?: InputMaybe<BodyType>\n  description?: InputMaybe<Scalars['String']>\n  displayName?: InputMaybe<Scalars['String']>\n  dob?: InputMaybe<Scalars['DateTime']>\n  gender?: InputMaybe<Gender>\n  height?: InputMaybe<Scalars['Int']>\n  id: Scalars['Int']\n  images?: InputMaybe<Array<Scalars['String']>>\n  missingSince?: InputMaybe<Scalars['DateTime']>\n  weight?: InputMaybe<Scalars['Int']>\n}\n\nexport type UpdateOfficerInput = {\n  name?: InputMaybe<Scalars['String']>\n  uid: Scalars['String']\n}\n\nexport type UpdateReportInput = {\n  audio?: InputMaybe<Scalars['String']>\n  caseId?: InputMaybe<Scalars['Int']>\n  description?: InputMaybe<Scalars['String']>\n  id: Scalars['Int']\n  images?: InputMaybe<Array<Scalars['String']>>\n  locationId?: InputMaybe<Scalars['Int']>\n  time?: InputMaybe<Scalars['DateTime']>\n  type?: InputMaybe<ReportType>\n  witnessId?: InputMaybe<Scalars['String']>\n}\n\nexport type UpdateWitnessInput = {\n  name?: InputMaybe<Scalars['String']>\n  uid: Scalars['String']\n}\n\nexport type Witness = {\n  __typename?: 'Witness'\n  createdAt: Scalars['DateTime']\n  name?: Maybe<Scalars['String']>\n  reports: Array<Report>\n  uid: Scalars['String']\n  updatedAt: Scalars['DateTime']\n}\n\nexport type WitnessOrderByWithRelationInput = {\n  comments?: InputMaybe<CommentOrderByRelationAggregateInput>\n  createdAt?: InputMaybe<SortOrder>\n  name?: InputMaybe<SortOrder>\n  reports?: InputMaybe<ReportOrderByRelationAggregateInput>\n  uid?: InputMaybe<SortOrder>\n  updatedAt?: InputMaybe<SortOrder>\n}\n\nexport type WitnessRelationFilter = {\n  is?: InputMaybe<WitnessWhereInput>\n  isNot?: InputMaybe<WitnessWhereInput>\n}\n\nexport enum WitnessScalarFieldEnum {\n  CreatedAt = 'createdAt',\n  Name = 'name',\n  Uid = 'uid',\n  UpdatedAt = 'updatedAt',\n}\n\nexport type WitnessWhereInput = {\n  AND?: InputMaybe<Array<WitnessWhereInput>>\n  NOT?: InputMaybe<Array<WitnessWhereInput>>\n  OR?: InputMaybe<Array<WitnessWhereInput>>\n  comments?: InputMaybe<CommentListRelationFilter>\n  createdAt?: InputMaybe<DateTimeFilter>\n  name?: InputMaybe<StringFilter>\n  reports?: InputMaybe<ReportListRelationFilter>\n  uid?: InputMaybe<StringFilter>\n  updatedAt?: InputMaybe<DateTimeFilter>\n}\n\nexport type WitnessWhereUniqueInput = {\n  uid?: InputMaybe<Scalars['String']>\n}\n\nexport type ReportsQueryVariables = Exact<{ [key: string]: never }>\n\nexport type ReportsQuery = {\n  __typename?: 'Query'\n  reports: Array<{ __typename?: 'Report'; id: number }>\n}\n\nexport type CreateWitnessMutationVariables = Exact<{\n  createWitnessInput: CreateWitnessInput\n}>\n\nexport type CreateWitnessMutation = {\n  __typename?: 'Mutation'\n  createWitness: { __typename?: 'Witness'; uid: string }\n}\n\nexport type SearchCasesQueryVariables = Exact<{\n  locationFilter: LocationFilterInput\n  dateFilter?: InputMaybe<DateFilterInput>\n}>\n\nexport type SearchCasesQuery = {\n  __typename?: 'Query'\n  searchCases: Array<{\n    __typename?: 'Report'\n    case?: {\n      __typename?: 'Case'\n      status: Status\n      id: number\n      missingPerson: {\n        __typename?: 'MissingPerson'\n        images: Array<string>\n        displayName: string\n        gender: Gender\n      }\n    } | null\n    location?: {\n      __typename?: 'Location'\n      address: string\n      latitude: number\n      longitude: number\n    } | null\n  }>\n}\n\nexport type CaseQueryVariables = Exact<{\n  where: CaseWhereUniqueInput\n}>\n\nexport type CaseQuery = {\n  __typename?: 'Query'\n  case: {\n    __typename?: 'Case'\n    id: number\n    contact: Array<string>\n    status: Status\n    missingPerson: {\n      __typename?: 'MissingPerson'\n      displayName: string\n      description: string\n      missingSince?: any | null\n      gender: Gender\n      dob?: any | null\n      height?: number | null\n      weight?: number | null\n      images: Array<string>\n    }\n    reports: Array<{\n      __typename?: 'Report'\n      time?: any | null\n      id: number\n      type: ReportType\n      audio?: string | null\n      description: string\n      witness?: {\n        __typename?: 'Witness'\n        uid: string\n        name?: string | null\n      } | null\n      comments?: Array<{\n        __typename?: 'Comment'\n        id: number\n        content: string\n        createdAt: any\n        witness?: {\n          __typename?: 'Witness'\n          name?: string | null\n          uid: string\n        } | null\n      }> | null\n      approvedReport?: {\n        __typename?: 'ApprovedReport'\n        id: number\n        description?: string | null\n      } | null\n      location?: {\n        __typename?: 'Location'\n        latitude: number\n        longitude: number\n      } | null\n    }>\n  }\n}\n\nexport type CreateCaseMutationVariables = Exact<{\n  createCaseInput: CreateCaseInput\n}>\n\nexport type CreateCaseMutation = {\n  __typename?: 'Mutation'\n  createCase: { __typename?: 'Case'; id: number }\n}\n\nexport type OfficerMeQueryVariables = Exact<{ [key: string]: never }>\n\nexport type OfficerMeQuery = {\n  __typename?: 'Query'\n  officerMe?: {\n    __typename?: 'Officer'\n    uid: string\n    createdAt: any\n    name?: string | null\n    updatedAt: any\n  } | null\n}\n\nexport type WitnessMeQueryVariables = Exact<{ [key: string]: never }>\n\nexport type WitnessMeQuery = {\n  __typename?: 'Query'\n  witnessMe?: {\n    __typename?: 'Witness'\n    uid: string\n    createdAt: any\n    name?: string | null\n    updatedAt: any\n  } | null\n}\n\nexport type CreateOfficerMutationVariables = Exact<{\n  createOfficerInput: CreateOfficerInput\n}>\n\nexport type CreateOfficerMutation = {\n  __typename?: 'Mutation'\n  createOfficer: {\n    __typename?: 'Officer'\n    uid: string\n    name?: string | null\n    createdAt: any\n    updatedAt: any\n  }\n}\n\nexport type UnapprovedReportsQueryVariables = Exact<{\n  where?: InputMaybe<ReportWhereInput>\n  distinct?: InputMaybe<Array<ReportScalarFieldEnum> | ReportScalarFieldEnum>\n  skip?: InputMaybe<Scalars['Int']>\n  take?: InputMaybe<Scalars['Int']>\n  cursor?: InputMaybe<ReportWhereUniqueInput>\n  orderBy?: InputMaybe<\n    Array<ReportOrderByWithRelationInput> | ReportOrderByWithRelationInput\n  >\n}>\n\nexport type UnapprovedReportsQuery = {\n  __typename?: 'Query'\n  reports: Array<{\n    __typename?: 'Report'\n    id: number\n    caseId?: number | null\n    time?: any | null\n    type: ReportType\n    audio?: string | null\n    description: string\n    createdAt: any\n    location?: {\n      __typename?: 'Location'\n      latitude: number\n      longitude: number\n    } | null\n    witness?: {\n      __typename?: 'Witness'\n      uid: string\n      name?: string | null\n    } | null\n  }>\n}\n\nexport type CreateApprovedReportMutationVariables = Exact<{\n  createApprovedReportInput: CreateApprovedReportInput\n}>\n\nexport type CreateApprovedReportMutation = {\n  __typename?: 'Mutation'\n  createApprovedReport: {\n    __typename?: 'ApprovedReport'\n    description?: string | null\n  }\n}\n\nexport type CreateReportsMutationVariables = Exact<{\n  createReportsInput:\n    | Array<CreateReportInputWithoutCaseId>\n    | CreateReportInputWithoutCaseId\n  caseId: Scalars['Int']\n}>\n\nexport type CreateReportsMutation = {\n  __typename?: 'Mutation'\n  createReports: { __typename?: 'Case'; id: number }\n}\n\nexport type CreateCommentMutationVariables = Exact<{\n  createCommentInput: CreateCommentInput\n}>\n\nexport type CreateCommentMutation = {\n  __typename?: 'Mutation'\n  createComment: { __typename?: 'Comment'; id: number }\n}\n\nexport type UpdateCaseStatusMutationVariables = Exact<{\n  updateCaseInput: UpdateCaseInput\n}>\n\nexport type UpdateCaseStatusMutation = {\n  __typename?: 'Mutation'\n  updateCaseStatus: { __typename?: 'Case'; id: number }\n}\n\nexport const namedOperations = {\n  Query: {\n    reports: 'reports',\n    searchCases: 'searchCases',\n    case: 'case',\n    officerMe: 'officerMe',\n    witnessMe: 'witnessMe',\n    unapprovedReports: 'unapprovedReports',\n  },\n  Mutation: {\n    createWitness: 'createWitness',\n    createCase: 'createCase',\n    createOfficer: 'createOfficer',\n    createApprovedReport: 'createApprovedReport',\n    CreateReports: 'CreateReports',\n    createComment: 'createComment',\n    updateCaseStatus: 'updateCaseStatus',\n  },\n}\n\nexport const ReportsDocument = /*#__PURE__*/ gql`\n  query reports {\n    reports {\n      id\n    }\n  }\n`\n\n/**\n * __useReportsQuery__\n *\n * To run a query within a React component, call `useReportsQuery` and pass it any options that fit your needs.\n * When your component renders, `useReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReportsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useReportsQuery(\n  baseOptions?: Apollo.QueryHookOptions<ReportsQuery, ReportsQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<ReportsQuery, ReportsQueryVariables>(\n    ReportsDocument,\n    options,\n  )\n}\nexport function useReportsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    ReportsQuery,\n    ReportsQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<ReportsQuery, ReportsQueryVariables>(\n    ReportsDocument,\n    options,\n  )\n}\nexport type ReportsQueryHookResult = ReturnType<typeof useReportsQuery>\nexport type ReportsLazyQueryHookResult = ReturnType<typeof useReportsLazyQuery>\nexport type ReportsQueryResult = Apollo.QueryResult<\n  ReportsQuery,\n  ReportsQueryVariables\n>\nexport const CreateWitnessDocument = /*#__PURE__*/ gql`\n  mutation createWitness($createWitnessInput: CreateWitnessInput!) {\n    createWitness(createWitnessInput: $createWitnessInput) {\n      uid\n    }\n  }\n`\nexport type CreateWitnessMutationFn = Apollo.MutationFunction<\n  CreateWitnessMutation,\n  CreateWitnessMutationVariables\n>\n\n/**\n * __useCreateWitnessMutation__\n *\n * To run a mutation, you first call `useCreateWitnessMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateWitnessMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createWitnessMutation, { data, loading, error }] = useCreateWitnessMutation({\n *   variables: {\n *      createWitnessInput: // value for 'createWitnessInput'\n *   },\n * });\n */\nexport function useCreateWitnessMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateWitnessMutation,\n    CreateWitnessMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    CreateWitnessMutation,\n    CreateWitnessMutationVariables\n  >(CreateWitnessDocument, options)\n}\nexport type CreateWitnessMutationHookResult = ReturnType<\n  typeof useCreateWitnessMutation\n>\nexport type CreateWitnessMutationResult =\n  Apollo.MutationResult<CreateWitnessMutation>\nexport type CreateWitnessMutationOptions = Apollo.BaseMutationOptions<\n  CreateWitnessMutation,\n  CreateWitnessMutationVariables\n>\nexport const SearchCasesDocument = /*#__PURE__*/ gql`\n  query searchCases(\n    $locationFilter: LocationFilterInput!\n    $dateFilter: DateFilterInput\n  ) {\n    searchCases(locationFilter: $locationFilter, dateFilter: $dateFilter) {\n      case {\n        status\n        id\n        missingPerson {\n          images\n          displayName\n          gender\n        }\n      }\n      location {\n        address\n        latitude\n        longitude\n      }\n    }\n  }\n`\n\n/**\n * __useSearchCasesQuery__\n *\n * To run a query within a React component, call `useSearchCasesQuery` and pass it any options that fit your needs.\n * When your component renders, `useSearchCasesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSearchCasesQuery({\n *   variables: {\n *      locationFilter: // value for 'locationFilter'\n *      dateFilter: // value for 'dateFilter'\n *   },\n * });\n */\nexport function useSearchCasesQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SearchCasesQuery,\n    SearchCasesQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<SearchCasesQuery, SearchCasesQueryVariables>(\n    SearchCasesDocument,\n    options,\n  )\n}\nexport function useSearchCasesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SearchCasesQuery,\n    SearchCasesQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<SearchCasesQuery, SearchCasesQueryVariables>(\n    SearchCasesDocument,\n    options,\n  )\n}\nexport type SearchCasesQueryHookResult = ReturnType<typeof useSearchCasesQuery>\nexport type SearchCasesLazyQueryHookResult = ReturnType<\n  typeof useSearchCasesLazyQuery\n>\nexport type SearchCasesQueryResult = Apollo.QueryResult<\n  SearchCasesQuery,\n  SearchCasesQueryVariables\n>\nexport const CaseDocument = /*#__PURE__*/ gql`\n  query case($where: CaseWhereUniqueInput!) {\n    case(where: $where) {\n      id\n      missingPerson {\n        displayName\n        description\n        missingSince\n        gender\n        dob\n        height\n        weight\n        images\n      }\n      reports {\n        time\n        id\n        type\n        audio\n        witness {\n          uid\n          name\n        }\n        comments {\n          id\n          content\n          createdAt\n          witness {\n            name\n            uid\n          }\n        }\n        approvedReport {\n          id\n          description\n        }\n        description\n        location {\n          latitude\n          longitude\n        }\n      }\n      contact\n      status\n    }\n  }\n`\n\n/**\n * __useCaseQuery__\n *\n * To run a query within a React component, call `useCaseQuery` and pass it any options that fit your needs.\n * When your component renders, `useCaseQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCaseQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useCaseQuery(\n  baseOptions: Apollo.QueryHookOptions<CaseQuery, CaseQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<CaseQuery, CaseQueryVariables>(CaseDocument, options)\n}\nexport function useCaseLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<CaseQuery, CaseQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<CaseQuery, CaseQueryVariables>(\n    CaseDocument,\n    options,\n  )\n}\nexport type CaseQueryHookResult = ReturnType<typeof useCaseQuery>\nexport type CaseLazyQueryHookResult = ReturnType<typeof useCaseLazyQuery>\nexport type CaseQueryResult = Apollo.QueryResult<CaseQuery, CaseQueryVariables>\nexport const CreateCaseDocument = /*#__PURE__*/ gql`\n  mutation createCase($createCaseInput: CreateCaseInput!) {\n    createCase(createCaseInput: $createCaseInput) {\n      id\n    }\n  }\n`\nexport type CreateCaseMutationFn = Apollo.MutationFunction<\n  CreateCaseMutation,\n  CreateCaseMutationVariables\n>\n\n/**\n * __useCreateCaseMutation__\n *\n * To run a mutation, you first call `useCreateCaseMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCaseMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCaseMutation, { data, loading, error }] = useCreateCaseMutation({\n *   variables: {\n *      createCaseInput: // value for 'createCaseInput'\n *   },\n * });\n */\nexport function useCreateCaseMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateCaseMutation,\n    CreateCaseMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<CreateCaseMutation, CreateCaseMutationVariables>(\n    CreateCaseDocument,\n    options,\n  )\n}\nexport type CreateCaseMutationHookResult = ReturnType<\n  typeof useCreateCaseMutation\n>\nexport type CreateCaseMutationResult = Apollo.MutationResult<CreateCaseMutation>\nexport type CreateCaseMutationOptions = Apollo.BaseMutationOptions<\n  CreateCaseMutation,\n  CreateCaseMutationVariables\n>\nexport const OfficerMeDocument = /*#__PURE__*/ gql`\n  query officerMe {\n    officerMe {\n      uid\n      createdAt\n      name\n      updatedAt\n    }\n  }\n`\n\n/**\n * __useOfficerMeQuery__\n *\n * To run a query within a React component, call `useOfficerMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useOfficerMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOfficerMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useOfficerMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    OfficerMeQuery,\n    OfficerMeQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<OfficerMeQuery, OfficerMeQueryVariables>(\n    OfficerMeDocument,\n    options,\n  )\n}\nexport function useOfficerMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    OfficerMeQuery,\n    OfficerMeQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<OfficerMeQuery, OfficerMeQueryVariables>(\n    OfficerMeDocument,\n    options,\n  )\n}\nexport type OfficerMeQueryHookResult = ReturnType<typeof useOfficerMeQuery>\nexport type OfficerMeLazyQueryHookResult = ReturnType<\n  typeof useOfficerMeLazyQuery\n>\nexport type OfficerMeQueryResult = Apollo.QueryResult<\n  OfficerMeQuery,\n  OfficerMeQueryVariables\n>\nexport const WitnessMeDocument = /*#__PURE__*/ gql`\n  query witnessMe {\n    witnessMe {\n      uid\n      createdAt\n      name\n      updatedAt\n    }\n  }\n`\n\n/**\n * __useWitnessMeQuery__\n *\n * To run a query within a React component, call `useWitnessMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useWitnessMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWitnessMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWitnessMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    WitnessMeQuery,\n    WitnessMeQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<WitnessMeQuery, WitnessMeQueryVariables>(\n    WitnessMeDocument,\n    options,\n  )\n}\nexport function useWitnessMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WitnessMeQuery,\n    WitnessMeQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<WitnessMeQuery, WitnessMeQueryVariables>(\n    WitnessMeDocument,\n    options,\n  )\n}\nexport type WitnessMeQueryHookResult = ReturnType<typeof useWitnessMeQuery>\nexport type WitnessMeLazyQueryHookResult = ReturnType<\n  typeof useWitnessMeLazyQuery\n>\nexport type WitnessMeQueryResult = Apollo.QueryResult<\n  WitnessMeQuery,\n  WitnessMeQueryVariables\n>\nexport const CreateOfficerDocument = /*#__PURE__*/ gql`\n  mutation createOfficer($createOfficerInput: CreateOfficerInput!) {\n    createOfficer(createOfficerInput: $createOfficerInput) {\n      uid\n      name\n      createdAt\n      updatedAt\n    }\n  }\n`\nexport type CreateOfficerMutationFn = Apollo.MutationFunction<\n  CreateOfficerMutation,\n  CreateOfficerMutationVariables\n>\n\n/**\n * __useCreateOfficerMutation__\n *\n * To run a mutation, you first call `useCreateOfficerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateOfficerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createOfficerMutation, { data, loading, error }] = useCreateOfficerMutation({\n *   variables: {\n *      createOfficerInput: // value for 'createOfficerInput'\n *   },\n * });\n */\nexport function useCreateOfficerMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateOfficerMutation,\n    CreateOfficerMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    CreateOfficerMutation,\n    CreateOfficerMutationVariables\n  >(CreateOfficerDocument, options)\n}\nexport type CreateOfficerMutationHookResult = ReturnType<\n  typeof useCreateOfficerMutation\n>\nexport type CreateOfficerMutationResult =\n  Apollo.MutationResult<CreateOfficerMutation>\nexport type CreateOfficerMutationOptions = Apollo.BaseMutationOptions<\n  CreateOfficerMutation,\n  CreateOfficerMutationVariables\n>\nexport const UnapprovedReportsDocument = /*#__PURE__*/ gql`\n  query unapprovedReports(\n    $where: ReportWhereInput\n    $distinct: [ReportScalarFieldEnum!]\n    $skip: Int\n    $take: Int\n    $cursor: ReportWhereUniqueInput\n    $orderBy: [ReportOrderByWithRelationInput!]\n  ) {\n    reports(\n      where: $where\n      distinct: $distinct\n      skip: $skip\n      take: $take\n      cursor: $cursor\n      orderBy: $orderBy\n    ) {\n      id\n      caseId\n      time\n      type\n      audio\n      description\n      createdAt\n      location {\n        latitude\n        longitude\n      }\n      witness {\n        uid\n        name\n      }\n    }\n  }\n`\n\n/**\n * __useUnapprovedReportsQuery__\n *\n * To run a query within a React component, call `useUnapprovedReportsQuery` and pass it any options that fit your needs.\n * When your component renders, `useUnapprovedReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUnapprovedReportsQuery({\n *   variables: {\n *      where: // value for 'where'\n *      distinct: // value for 'distinct'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      cursor: // value for 'cursor'\n *      orderBy: // value for 'orderBy'\n *   },\n * });\n */\nexport function useUnapprovedReportsQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    UnapprovedReportsQuery,\n    UnapprovedReportsQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<\n    UnapprovedReportsQuery,\n    UnapprovedReportsQueryVariables\n  >(UnapprovedReportsDocument, options)\n}\nexport function useUnapprovedReportsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    UnapprovedReportsQuery,\n    UnapprovedReportsQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<\n    UnapprovedReportsQuery,\n    UnapprovedReportsQueryVariables\n  >(UnapprovedReportsDocument, options)\n}\nexport type UnapprovedReportsQueryHookResult = ReturnType<\n  typeof useUnapprovedReportsQuery\n>\nexport type UnapprovedReportsLazyQueryHookResult = ReturnType<\n  typeof useUnapprovedReportsLazyQuery\n>\nexport type UnapprovedReportsQueryResult = Apollo.QueryResult<\n  UnapprovedReportsQuery,\n  UnapprovedReportsQueryVariables\n>\nexport const CreateApprovedReportDocument = /*#__PURE__*/ gql`\n  mutation createApprovedReport(\n    $createApprovedReportInput: CreateApprovedReportInput!\n  ) {\n    createApprovedReport(\n      createApprovedReportInput: $createApprovedReportInput\n    ) {\n      description\n    }\n  }\n`\nexport type CreateApprovedReportMutationFn = Apollo.MutationFunction<\n  CreateApprovedReportMutation,\n  CreateApprovedReportMutationVariables\n>\n\n/**\n * __useCreateApprovedReportMutation__\n *\n * To run a mutation, you first call `useCreateApprovedReportMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateApprovedReportMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createApprovedReportMutation, { data, loading, error }] = useCreateApprovedReportMutation({\n *   variables: {\n *      createApprovedReportInput: // value for 'createApprovedReportInput'\n *   },\n * });\n */\nexport function useCreateApprovedReportMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateApprovedReportMutation,\n    CreateApprovedReportMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    CreateApprovedReportMutation,\n    CreateApprovedReportMutationVariables\n  >(CreateApprovedReportDocument, options)\n}\nexport type CreateApprovedReportMutationHookResult = ReturnType<\n  typeof useCreateApprovedReportMutation\n>\nexport type CreateApprovedReportMutationResult =\n  Apollo.MutationResult<CreateApprovedReportMutation>\nexport type CreateApprovedReportMutationOptions = Apollo.BaseMutationOptions<\n  CreateApprovedReportMutation,\n  CreateApprovedReportMutationVariables\n>\nexport const CreateReportsDocument = /*#__PURE__*/ gql`\n  mutation CreateReports(\n    $createReportsInput: [CreateReportInputWithoutCaseId!]!\n    $caseId: Int!\n  ) {\n    createReports(createReportsInput: $createReportsInput, caseId: $caseId) {\n      id\n    }\n  }\n`\nexport type CreateReportsMutationFn = Apollo.MutationFunction<\n  CreateReportsMutation,\n  CreateReportsMutationVariables\n>\n\n/**\n * __useCreateReportsMutation__\n *\n * To run a mutation, you first call `useCreateReportsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateReportsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createReportsMutation, { data, loading, error }] = useCreateReportsMutation({\n *   variables: {\n *      createReportsInput: // value for 'createReportsInput'\n *      caseId: // value for 'caseId'\n *   },\n * });\n */\nexport function useCreateReportsMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateReportsMutation,\n    CreateReportsMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    CreateReportsMutation,\n    CreateReportsMutationVariables\n  >(CreateReportsDocument, options)\n}\nexport type CreateReportsMutationHookResult = ReturnType<\n  typeof useCreateReportsMutation\n>\nexport type CreateReportsMutationResult =\n  Apollo.MutationResult<CreateReportsMutation>\nexport type CreateReportsMutationOptions = Apollo.BaseMutationOptions<\n  CreateReportsMutation,\n  CreateReportsMutationVariables\n>\nexport const CreateCommentDocument = /*#__PURE__*/ gql`\n  mutation createComment($createCommentInput: CreateCommentInput!) {\n    createComment(createCommentInput: $createCommentInput) {\n      id\n    }\n  }\n`\nexport type CreateCommentMutationFn = Apollo.MutationFunction<\n  CreateCommentMutation,\n  CreateCommentMutationVariables\n>\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      createCommentInput: // value for 'createCommentInput'\n *   },\n * });\n */\nexport function useCreateCommentMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateCommentMutation,\n    CreateCommentMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    CreateCommentMutation,\n    CreateCommentMutationVariables\n  >(CreateCommentDocument, options)\n}\nexport type CreateCommentMutationHookResult = ReturnType<\n  typeof useCreateCommentMutation\n>\nexport type CreateCommentMutationResult =\n  Apollo.MutationResult<CreateCommentMutation>\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<\n  CreateCommentMutation,\n  CreateCommentMutationVariables\n>\nexport const UpdateCaseStatusDocument = /*#__PURE__*/ gql`\n  mutation updateCaseStatus($updateCaseInput: UpdateCaseInput!) {\n    updateCaseStatus(updateCaseInput: $updateCaseInput) {\n      id\n    }\n  }\n`\nexport type UpdateCaseStatusMutationFn = Apollo.MutationFunction<\n  UpdateCaseStatusMutation,\n  UpdateCaseStatusMutationVariables\n>\n\n/**\n * __useUpdateCaseStatusMutation__\n *\n * To run a mutation, you first call `useUpdateCaseStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCaseStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCaseStatusMutation, { data, loading, error }] = useUpdateCaseStatusMutation({\n *   variables: {\n *      updateCaseInput: // value for 'updateCaseInput'\n *   },\n * });\n */\nexport function useUpdateCaseStatusMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateCaseStatusMutation,\n    UpdateCaseStatusMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    UpdateCaseStatusMutation,\n    UpdateCaseStatusMutationVariables\n  >(UpdateCaseStatusDocument, options)\n}\nexport type UpdateCaseStatusMutationHookResult = ReturnType<\n  typeof useUpdateCaseStatusMutation\n>\nexport type UpdateCaseStatusMutationResult =\n  Apollo.MutationResult<UpdateCaseStatusMutation>\nexport type UpdateCaseStatusMutationOptions = Apollo.BaseMutationOptions<\n  UpdateCaseStatusMutation,\n  UpdateCaseStatusMutationVariables\n>\n"],"names":["docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","cacheKeyFromLoc","loc","processFragments","ast","seenKeys","definitions","fragmentDefinition","fragmentName","sourceKey","sourceKeySet","__assign","stripLoc","doc","workSet","node","key","value","parseDocument","source","cacheKey","parsed","parse","gql","literals","args","_i","result","arg","i","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","extras","gql_1","useApolloClient","override","context","useContext","getApolloContext","client","invariant","didWarnUncachedGetSnapshot","uSESKey","realHook","React","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","_a","React.useState","inst","forceUpdate","canUseLayoutEffect","React.useLayoutEffect","checkIfSnapshotChanged","React.useEffect","DocumentType","cache","operationName","type","name","parser","document","cached","variables","fragments","queries","mutations","subscriptions","x","definition","payload","verifyDocumentType","operation","requiredOperationName","usedOperationName","hasOwnProperty","useQuery","query","options","useInternalState","stateRef","useRef","InternalState","state","useState","setTick","tick","previous","canUseWeakSet","maybeDeepFreeze","NetworkStatus","canUseWeakMap","previousResult","previousData","signal","_this","resolve","reject","watchQueryOptions","handleAborted","obsQuery","useCallback","onNext","equal","onError","error","last","subscription","queryResult","currentWatchQueryOptions","toMerge","globalDefaults","compact","mergeOptions","_b","skip","otherOptions","__rest","_c","fetchPolicy","_d","initialFetchPolicy","data","useMemo","ssrAllowed","nextResult","error_1","isNonEmptyArray","ApolloError","resultWithoutPartial","EAGER_METHODS","useLazyQuery","abortControllersRef","execOptionsRef","merged","internalState","useQueryResult","eagerMethods","_loop_1","method","EAGER_METHODS_1","useEffect","controller","execute","executeOptions","promise","useMutation","mutation","setResult","ref","baseOptions","mutationId","clientOptions","response","errors","result_1","onCompleted","result_2","reset","defaultOptions","BodyType","BodyType2","Gender","Gender2","ReportType","ReportType2","RoleEnum","RoleEnum2","Status","Status2","namedOperations","ReportsDocument","useReportsQuery","Apollo.useQuery","useReportsLazyQuery","Apollo.useLazyQuery","CreateWitnessDocument","useCreateWitnessMutation","Apollo.useMutation","SearchCasesDocument","useSearchCasesQuery","useSearchCasesLazyQuery","CaseDocument","useCaseQuery","useCaseLazyQuery","CreateCaseDocument","useCreateCaseMutation","OfficerMeDocument","useOfficerMeQuery","useOfficerMeLazyQuery","WitnessMeDocument","useWitnessMeQuery","useWitnessMeLazyQuery","CreateOfficerDocument","useCreateOfficerMutation","UnapprovedReportsDocument","useUnapprovedReportsQuery","useUnapprovedReportsLazyQuery","CreateApprovedReportDocument","useCreateApprovedReportMutation","CreateReportsDocument","useCreateReportsMutation","CreateCommentDocument","useCreateCommentMutation","UpdateCaseStatusDocument","useUpdateCaseStatusMutation"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}