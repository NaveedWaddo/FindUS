{"version":3,"file":"LoginForm.stories-e58a13fd.js","sources":["../../../forms/src/login.tsx","../../src/components/templates/LoginForm/LoginForm.tsx"],"sourcesContent":["import { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\nimport { registerFormSchema } from './signUp'\n\nexport const loginFormSchema = registerFormSchema.pick({\n  email: true,\n  password: true,\n})\n\nexport type FormTypeLogin = z.infer<typeof loginFormSchema>\n\nexport const useFormLogin = () =>\n  useForm<FormTypeLogin>({\n    resolver: zodResolver(loginFormSchema),\n  })\n","import { HtmlLabel } from '../../atoms/HtmlLabel'\nimport { HtmlInput } from '../../atoms/HtmlInput'\nimport { Button } from '../../atoms/Button'\nimport Link from 'next/link'\n\nimport { FormTypeLogin, useFormLogin } from '@findus-org/forms/src/login'\nimport { FormError } from '../../atoms/FormError'\nimport { Form } from '../../atoms/Form'\n\nimport { useAppSelector } from '@findus-org/store'\nimport { selectUid } from '@findus-org/store/user'\n\nimport { useAsync } from '@findus-org/hooks/src/fetcher'\nimport { googleSignIn, login } from '@findus-org/network/src/auth'\nimport { notification$ } from '@findus-org/util/subjects'\nimport { useRouter } from 'next/router'\nimport { PlainButton } from '../../atoms/PlainButton'\nimport { IconBrandGoogle } from '@tabler/icons-react'\n\nexport interface ILoginFormProps {\n  className?: string\n}\n\nconst LoginForm = ({ className }: ILoginFormProps) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useFormLogin()\n\n  const { loading, error, success, callAsyncFn } = useAsync(\n    (data: FormTypeLogin) => login(data),\n    (err: any) => {\n      if (err.code === 'auth/user-not-found') {\n        return 'Invalid email.'\n      } else if (err.code === 'auth/wrong-password') {\n        return 'Invalid password.'\n      }\n      return 'Something went wrong. Please try again.'\n    },\n  )\n\n  const router = useRouter()\n\n  const uid = useAppSelector(selectUid)\n\n  if (uid) {\n    notification$.next({ message: 'Logged in.' })\n    router.push('/')\n  }\n\n  return (\n    <Form\n      onSubmit={handleSubmit(async (data) => {\n        const { email, password } = data\n        await callAsyncFn({ email, password })\n      })}\n    >\n      <HtmlLabel\n        className=\"text-black\"\n        title=\"Email\"\n        error={errors.email?.message}\n      >\n        <HtmlInput placeholder=\"Enter the email.\" {...register('email')} />\n      </HtmlLabel>\n      <HtmlLabel title=\"Password\" error={errors.password?.message}>\n        <HtmlInput\n          type=\"password\"\n          placeholder=\"********\"\n          {...register('password')}\n        />\n      </HtmlLabel>\n      <Button isLoading={loading} type=\"submit\" fullWidth>\n        Login\n      </Button>\n      {error ? <FormError error={error.message} /> : null}\n      <div className=\"mt-4 text-sm\">\n        Do not have a FindUS account?\n        <br />\n        <Link\n          href=\"/register\"\n          className=\"font-bold underline underline-offset-4\"\n        >\n          Create one\n        </Link>{' '}\n        now.\n      </div>\n      <div className=\"flex justify-center gap-2 mt-6\">\n        <PlainButton\n          className=\"p-1 transition-all border-2 border-black rounded-full shadow-lg hover:shadow-xl\"\n          onClick={googleSignIn}\n        >\n          <IconBrandGoogle />\n        </PlainButton>\n      </div>\n    </Form>\n  )\n}\n\nexport { LoginForm }\n"],"names":["loginFormSchema","registerFormSchema","useFormLogin","useForm","zodResolver","LoginForm","className","register","handleSubmit","errors","loading","error","success","callAsyncFn","useAsync","data","login","err","router","useRouter","useAppSelector","selectUid","notification$","jsxs","Form","email","password","jsx","HtmlLabel","_a","HtmlInput","_b","Button","FormError","Link","PlainButton","googleSignIn","IconBrandGoogle"],"mappings":"kyCAKa,MAAAA,EAAkBC,EAAmB,KAAK,CACrD,MAAO,GACP,SAAU,EACZ,CAAC,EAIYC,EAAe,IAC1BC,EAAuB,CACrB,SAAUC,EAAYJ,CAAe,CACvC,CAAC,ECQHK,EAAA,CAAA,CAAA,UAAAC,KAAA,SACE,KAAA,CAAM,SAAAC,EACJ,aAAAC,EACA,UAAA,CAAA,OAAAC,CAAA,CACoB,EAAAP,EAAA,EAGtB,CAAA,QAAAQ,EAAA,MAAAC,EAAA,QAAAC,EAAA,YAAAC,CAAA,EAAAC,EAAiDC,GAAAC,EAAAD,CAAA,EACZE,GAEjCA,EAAA,OAAA,sBACE,iBAAOA,EAAA,OAAA,sBAEP,oBAEF,yCACF,EAGFC,EAAAC,EAAAA,YAIA,OAFAC,EAAAC,CAAA,IAGEC,EAAA,KAAA,CAAA,QAAA,YAAA,CAAA,EACAJ,EAAA,KAAA,GAAA,GAGFK,EAAA,KACEC,EAAC,CAAA,SAAAhB,EAAA,MAAAO,GAAA,CAEG,KAAA,CAAA,MAAAU,EAAA,SAAAC,CAAA,EAAAX,EACA,MAAAF,EAAA,CAAA,MAAAY,EAAA,SAAAC,CAAA,CAAA,CAAqC,CAAA,EACtC,SAAA,CAEDC,EAAA,IAAAC,EAAC,CAAA,UAAA,aACW,MAAA,QACJ,OAAAC,EAAApB,EAAA,QAAA,YAAAoB,EAAA,QACe,SAAAF,EAAAA,IAAAG,EAAA,CAAA,YAAA,mBAAA,GAAAvB,EAAA,OAAA,EAAA,CAE4C,CAAA,EACnEoB,MAAAC,EAAA,CAAA,MAAA,WAAA,OAAAG,EAAAtB,EAAA,WAAA,YAAAsB,EAAA,QAAA,SAAAJ,EAAA,IAEEG,EAAC,CAAA,KAAA,WACM,YAAA,WACO,GAAAvB,EAAA,UAAA,CACW,CAAA,EAAA,EAE3BoB,EAAAA,IAAAK,EAAA,CAAA,UAAAtB,EAAA,KAAA,SAAA,UAAA,GAAA,SAAA,OAAA,CAAA,EAGAC,EAAAgB,EAAA,IAAAM,EAAA,CAAA,MAAAtB,EAAA,OAAA,CAAA,EAAA,KAC+CY,EAAAA,KAAA,MAAA,CAAA,UAAA,eAAA,SAAA,CACjB,gCAAAI,EAAA,IAAA,KAAA,EAAA,EAExBA,EAAA,IACJO,EAAC,CAAA,KAAA,YACM,UAAA,yCACK,SAAA,YACX,CAAA,EAED,IAAQ,MAAI,EAAA,EAEdP,EAAAA,IAAA,MAAA,CAAA,UAAA,iCAAA,SAAAA,EAAA,IAEEQ,EAAC,CAAA,UAAA,kFACW,QAAAC,EACD,SAAAT,EAAAA,IAAAU,EAAA,EAAA,CAEQ,CAAA,EAAA,CAErB,CAAA,CAAA,CAGN"}