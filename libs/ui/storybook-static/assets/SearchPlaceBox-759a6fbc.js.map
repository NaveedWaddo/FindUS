{"version":3,"file":"SearchPlaceBox-759a6fbc.js","sources":["../../src/components/molecules/SearchPlaceBox/SearchPlaceBox.tsx"],"sourcesContent":["import { LocationInfo, useSearchLocation } from '@findus-org/hooks/src/location'\n\nimport { useMap } from 'react-map-gl'\nimport { Autocomplete } from '../../atoms/Autocomplete'\nimport { ViewState } from '../../organisms/Map/Map'\n\nexport interface ISearchPlaceBoxProps {\n  setLocationInfo: (locationInfo: LocationInfo) => void\n  value?: string\n}\n\nexport const majorCitiesLocationInfo: LocationInfo[] = [\n  {\n    placeName: 'Chennai, Tamil Nadu, India',\n    latLng: [13.0827, 80.2707],\n  },\n  {\n    placeName: 'New York, New York, United States',\n    latLng: [40.7128, -74.006],\n  },\n  {\n    placeName: 'London, Greater London, England, United Kingdom',\n    latLng: [51.5074, -0.1278],\n  },\n  {\n    placeName: 'Paris, France',\n    latLng: [48.8566, 2.3522],\n  },\n  {\n    placeName: 'Berlin, Germany',\n    latLng: [52.52, 13.405],\n  },\n  {\n    placeName: 'Sydney, New South Wales, Australia',\n    latLng: [-33.8688, 151.2093],\n  },\n  {\n    placeName: 'Rio de Janeiro, Brazil',\n    latLng: [-22.9068, -43.1729],\n  },\n  {\n    placeName: 'Cape Town, Western Cape, South Africa',\n    latLng: [-33.9249, 18.4241],\n  },\n  {\n    placeName: 'Moscow, Russia',\n    latLng: [55.7558, 37.6176],\n  },\n  {\n    placeName: 'Beijing, China',\n    latLng: [39.9042, 116.4074],\n  },\n]\nexport const SearchPlaceBox = ({\n  onLocationChange,\n}: {\n  onLocationChange?: (location: ViewState) => void\n}) => {\n  const { current: map } = useMap()\n  const { loading, setLoading, searchText, setSearchText, locationInfo } =\n    useSearchLocation()\n\n  return (\n    <Autocomplete<LocationInfo, false, false, false>\n      options={locationInfo.length ? locationInfo : majorCitiesLocationInfo}\n      isOptionEqualToValue={(option, value) =>\n        option.placeName === value.placeName\n      }\n      noOptionsText={searchText ? 'No options.' : 'Type something...'}\n      getOptionLabel={(x) => x.placeName}\n      onInputChange={(_, v) => {\n        setLoading(true)\n        setSearchText(v)\n      }}\n      loading={loading}\n      onChange={async (_, v) => {\n        if (v) {\n          const { latLng, placeName } = v\n          await map?.flyTo({\n            center: { lat: latLng[0], lng: latLng[1] },\n            zoom: 14,\n            essential: true,\n          })\n          if (onLocationChange) {\n            onLocationChange({ latitude: latLng[0], longitude: latLng[1] })\n          }\n        }\n      }}\n    />\n  )\n}\n"],"names":["majorCitiesLocationInfo","SearchPlaceBox","onLocationChange","map","useMap","loading","setLoading","searchText","setSearchText","locationInfo","useSearchLocation","jsx","Autocomplete","option","value","x","_","v","latLng","placeName"],"mappings":"yLAWO,MAAAA,EAAA,CAAgD,CACrD,UAAA,6BACa,OAAA,CAAA,QAAA,OAAA,CACc,EAC3B,CACA,UAAA,oCACa,OAAA,CAAA,QAAA,OAAA,CACc,EAC3B,CACA,UAAA,kDACa,OAAA,CAAA,QAAA,MAAA,CACc,EAC3B,CACA,UAAA,gBACa,OAAA,CAAA,QAAA,MAAA,CACa,EAC1B,CACA,UAAA,kBACa,OAAA,CAAA,MAAA,MAAA,CACW,EACxB,CACA,UAAA,qCACa,OAAA,CAAA,SAAA,QAAA,CACgB,EAC7B,CACA,UAAA,yBACa,OAAA,CAAA,SAAA,QAAA,CACgB,EAC7B,CACA,UAAA,wCACa,OAAA,CAAA,SAAA,OAAA,CACe,EAC5B,CACA,UAAA,iBACa,OAAA,CAAA,QAAA,OAAA,CACc,EAC3B,CACA,UAAA,iBACa,OAAA,CAAA,QAAA,QAAA,CACe,CAE9B,EACOC,EAAA,CAAA,CAAwB,iBAAAC,CAE/B,IAAA,CAGE,KAAA,CAAA,QAAAC,CAAA,EAAAC,EAAA,EACA,CAAA,QAAAC,EAAA,WAAAC,EAAA,WAAAC,EAAA,cAAAC,EAAA,aAAAC,CAAA,EAAAC,IAGA,OAAAC,EAAA,IACEC,EAAC,CAAA,QAAAH,EAAA,OAAAA,EAAAT,EAC+C,qBAAA,CAAAa,EAAAC,IAAAD,EAAA,YAAAC,EAAA,UAEjB,cAAAP,EAAA,cAAA,oBAEe,eAAAQ,GAAAA,EAAA,UACnB,cAAA,CAAAC,EAAAC,IAAA,CAEvBX,EAAA,EAAA,EACAE,EAAAS,CAAA,CAAe,EACjB,QAAAZ,EACA,SAAA,MAAAW,EAAAC,IAAA,CAEE,GAAAA,EAAA,CACE,KAAA,CAAA,OAAAC,EAAA,UAAAC,CAAA,EAAAF,EACA,MAAAd,GAAA,YAAAA,EAAA,MAAA,CAAiB,OAAA,CAAA,IAAAe,EAAA,CAAA,EAAA,IAAAA,EAAA,CAAA,CAAA,EAC0B,KAAA,GACnC,UAAA,EACK,IAEbhB,GACEA,EAAA,CAAA,SAAAgB,EAAA,CAAA,EAAA,UAAAA,EAAA,CAAA,CAAA,CAAA,CACF,CACF,CACF,CAAA,CAGN"}