{"version":3,"file":"MissingPersonInfo-4cb8387f.js","sources":["../../../../node_modules/date-fns/esm/compareAsc/index.js","../../../../node_modules/date-fns/esm/differenceInCalendarMonths/index.js","../../../../node_modules/date-fns/esm/differenceInMilliseconds/index.js","../../../../node_modules/date-fns/esm/_lib/roundingMethods/index.js","../../../../node_modules/date-fns/esm/endOfDay/index.js","../../../../node_modules/date-fns/esm/endOfMonth/index.js","../../../../node_modules/date-fns/esm/isLastDayOfMonth/index.js","../../../../node_modules/date-fns/esm/differenceInMonths/index.js","../../../../node_modules/date-fns/esm/differenceInSeconds/index.js","../../../../node_modules/date-fns/esm/_lib/assign/index.js","../../../../node_modules/date-fns/esm/_lib/cloneObject/index.js","../../../../node_modules/date-fns/esm/formatDistance/index.js","../../../../node_modules/date-fns/esm/formatDistanceToNow/index.js","../../src/components/organisms/MissingPersonInfo/MissingPersonInfo.tsx"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function trunc(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n};\n\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","export default function assign(target, object) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n  for (var property in object) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      ;\n      target[property] = object[property];\n    }\n  }\n  return target;\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(object) {\n  return assign({}, object);\n}","import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, options) {\n  var _ref, _options$locale;\n  requiredArgs(2, arguments);\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n  var localizeOptions = assign(cloneObject(options), {\n    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),\n    comparison: comparison\n  });\n  var dateLeft;\n  var dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options !== null && options !== void 0 && options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n  months = differenceInMonths(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import distanceInWords from \"../formatDistance/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport default function formatDistanceToNow(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), options);\n}","import { formatDistance, formatDistanceToNow } from 'date-fns'\nimport { CaseQuery } from '@findus-org/network/src/generated'\nimport { KeyValue } from '../../atoms/KeyValue'\nimport Image from 'next/image'\n\nexport interface IMissingPersonInfoProps {\n  missingPerson?: NonNullable<CaseQuery['case']>['missingPerson']\n  status: CaseQuery['case']['status']\n}\n\nexport const MissingPersonInfo = ({\n  missingPerson,\n  status,\n}: IMissingPersonInfoProps) => {\n  if (!missingPerson) return null\n  return (\n    <div className=\"space-y-4\">\n      <Image\n        alt={missingPerson.displayName}\n        fill\n        className=\"relative object-cover w-full h-full max-w-sm rounded aspect-square\"\n        src={missingPerson?.images ? missingPerson?.images[0] : ''}\n      />\n      <KeyValue title=\"Name\">{missingPerson.displayName}</KeyValue>\n      <KeyValue title=\"Status\">\n        <div className=\"capitalize\">\n          {status.split('_').join(' ').toLowerCase()}\n        </div>\n      </KeyValue>\n      <KeyValue title=\"Description\">{missingPerson.description}</KeyValue>\n      <div className=\"grid justify-between grid-cols-2 gap-1\">\n        <KeyValue title=\"Gender\">{missingPerson.gender}</KeyValue>\n        <KeyValue title=\"Age\">\n          <div>\n            {formatDistance(new Date(missingPerson.dob), new Date(), {\n              addSuffix: false,\n            })}\n          </div>\n        </KeyValue>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-1\">\n        <KeyValue title=\"Height\">{missingPerson.height} cm</KeyValue>\n        <KeyValue title=\"Weight\">{missingPerson.weight} kg</KeyValue>\n      </div>\n      <div className=\"grid grid-cols-2 gap-1\">\n        {missingPerson.missingSince ? (\n          <KeyValue title=\"Missing since\">\n            {formatDistanceToNow(new Date(missingPerson.missingSince), {\n              addSuffix: true,\n            })}\n          </KeyValue>\n        ) : null}\n      </div>\n      <div className=\"pt-6\" />\n    </div>\n  )\n}\n"],"names":["compareAsc","dirtyDateLeft","dirtyDateRight","requiredArgs","dateLeft","toDate","dateRight","diff","differenceInCalendarMonths","yearDiff","monthDiff","differenceInMilliseconds","roundingMap","value","defaultRoundingMethod","getRoundingMethod","method","endOfDay","dirtyDate","date","endOfMonth","month","isLastDayOfMonth","differenceInMonths","sign","difference","result","isLastMonthNotFull","differenceInSeconds","options","assign","target","object","property","cloneObject","MINUTES_IN_DAY","MINUTES_IN_ALMOST_TWO_DAYS","MINUTES_IN_MONTH","MINUTES_IN_TWO_MONTHS","formatDistance","dirtyBaseDate","_ref","_options$locale","defaultOptions","getDefaultOptions","locale","defaultLocale","comparison","localizeOptions","seconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","months","hours","days","nearestMonth","monthsSinceStartOfYear","years","formatDistanceToNow","distanceInWords","MissingPersonInfo","missingPerson","status","jsxs","jsx","Image","KeyValue"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12]}